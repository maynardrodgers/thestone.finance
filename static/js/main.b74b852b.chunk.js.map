{"version":3,"sources":["tomb-finance/config.ts","tomb-finance/ether-utils.ts","utils/provider.ts","tomb-finance/ERC20.ts","tomb-finance/TombFinance.ts","contexts/TombFinanceProvider/TombFinanceProvider.tsx","hooks/useTombFinance.ts","contexts/Banks/context.ts","contexts/Banks/Banks.tsx","utils/formatBalance.ts","contexts/Modals/Modals.tsx","contexts/RefreshContext/RefreshContextProvider.tsx","config.ts","state/application/actions.ts","hooks/useNetworkPrompt.ts","state/transactions/reducer.ts","state/application/reducer.ts","state/index.ts","theme/colors.ts","theme/index.ts","newTheme.js","hooks/useIsWindowVisible.ts","state/application/updater.ts","hooks/useDebounce.ts","state/transactions/updater.tsx","state/Updaters.tsx","components/Loader/index.js","components/Loader/Loader.js","components/Popups/TransactionPopup.tsx","components/Popups/ErrorPopup.tsx","components/Popups/PopupItem.tsx","components/Popups/index.tsx","App.tsx","serviceWorker.js","index.tsx","utils/constants.ts","state/transactions/actions.ts","state/application/hooks.ts"],"names":["defaultEthereumConfig","testing","autoGasMultiplier","defaultConfirmations","defaultGas","defaultGasPrice","ethereumNodeTimeout","web3ProviderFrom","endpoint","config","ethConfig","Object","assign","includes","Web3","providers","WebsocketProvider","HttpProvider","timeout","decimalToBalance","d","decimals","parseUnits","String","provider","getDefaultProvider","ethers","Web3Provider","defaultProvider","chainId","ERC20","address","symbol","decimal","contract","this","Contract","ABI","signerOrProvider","estimateGas","totalSupply","account","balanceOf","recipient","amount","transfer","owner","spender","allowance","approve","sender","transferFrom","a","balance","formatUnits","supply","Number","toFixed","inputs","internalType","name","type","stateMutability","anonymous","indexed","outputs","TombFinance","cfg","myAccount","signer","contracts","externalTokens","masonryVersionOfUser","TOMBWFTM_LP","STONE","SSHARE","SBOND","FTM","deployments","entries","deployment","abi","tomb","tShare","tBond","IUniswapV2PairABI","newProvider","getSigner","connect","tokens","values","console","log","fetchMasonryVersionOfUser","then","version","catch","err","error","stack","STONEFtmRewardPool","STONEFtmLPSTONERewardPool","STONEFtmLPSTONERewardPoolOld","tombRewardPoolSupply","tombRewardPoolSupply2","tombCirculatingSupply","sub","getTokenPriceFromPancakeswap","priceInFTM","getWFTMPriceFromPancakeswap","priceOfOneFTM","priceOfTombInDollars","tokenInFtm","priceInDollars","getDisplayBalance","circulatingSupply","lpToken","lpTokenSupplyBN","lpTokenSupply","token0","startsWith","isTomb","tokenAmountBN","tokenAmount","ftmAmountBN","ftmAmount","tokenAmountInOneLP","ftmAmountInOneLP","getLPTokenPrice","lpTokenPrice","lpTokenPriceFixed","toString","liquidity","priceOfOne","totalLiquidity","Treasury","getTombStat","tombStat","getBondPremiumRate","bondTombRatioBN","modifier","bondPriceInFTM","priceOfTBondInDollars","displayedTotalSupply","STONEFtmLPSSHARERewardPool","tShareCirculatingSupply","priceOfSharesInDollars","SeigniorageOracle","twap","utils","parseEther","expectedPrice","getStoneUpdatedPrice","getBurnableSTONELeft","bank","undefined","depositToken","poolContract","getDepositTokenPriceInDollars","depositTokenName","depositTokenPrice","stakeInPool","TVL","earnTokenName","getShareStat","stat","getTokenPerSecond","tokenPerSecond","tokenPerHour","mul","totalRewardPricePerYear","totalRewardPricePerDay","totalStakingTokenInPool","dailyAPR","yearlyAPR","contractName","endsWith","stonePerSecond","rewardPerSecond","div","poolStartTime","startDateTime","Date","toNumber","now","getTime","epochStonePerSecond","SsharePerSecond","tokenName","token","priceOfOneFtmInDollars","tokenPrice","epoch","getTombPrice","treasuryTombPrice","buyBonds","priceForTomb","redeemBonds","totalValue","bankDefinitions","bankInfo","pool","tokenAmountInPool","value","poolValue","isNaN","TSHAREPrice","currentMasonry","masonrytShareBalanceOf","masonryTVL","getFullDisplayBalance","tokenSupply","priceOfToken","tokenInLP","poolName","poolId","pendingSTONE","pendingShare","BigNumber","from","userInfo","deposit","withdraw","Masonry","tokenContract","ready","WFTM","wftm","Token","Fetcher","fetchPairData","wftmToToken","priceInBUSD","Route","midPrice","TokenSpirit","FetcherSpirit","liquidityToken","ftmBalanceInLP","shibaBalanceInLP","shibaAmount","priceOfShiba","FUSDT","fusdt_wftm_lp_pair","ftm_amount_BN","ftm_amount","fusdt_amount_BN","fusdt_amount","latestSnapshotIndex","boardroomHistory","lastHistory","lastRewardsReceived","TOMBPrice","amountOfRewardsPerDay","realAPR","canClaimReward","canWithdraw","getStakedSharesOnMasonry","stakedAmount","notStaked","result","isOldMasonryMember","Error","stake","getShareOf","getCashEarningsOf","earned","claimDividends","claimReward","exit","nextEpochPoint","nextEpochTimestamp","nextAllocation","prevAllocation","to","currentEpoch","boards","mason","startTimeEpoch","epochTimerStart","PERIOD","period","periodInHours","rewardLockupEpochs","targetEpochForClaimUnlock","fromDate","toDate","delta","endDate","moment","add","PeriodInHours","withdrawLockupEpochs","assetName","window","ethereum","networkVersion","asset","assetUrl","request","method","params","options","image","tombAmount","TaxOffice","overrides","addLiquidityETHTaxFree","SpookyRouter","getReserves","_reserve0","_reserve1","quote","treasuryDaoFundedFilter","filters","DaoFundFunded","treasuryDevFundedFilter","DevFundFunded","treasuryMasonryFundedFilter","MasonryFunded","boughtBondsFilter","BoughtBonds","redeemBondsFilter","RedeemedBonds","epochBlocksRanges","queryFilter","masonryFundEvents","events","forEach","index","push","masonryFund","args","startBlock","blockNumber","boughBonds","redeemedBonds","endBlock","getBondsWithFilterForPeriod","bondsBought","bondsRedeemed","devFund","daoFund","filter","bondsAmount","length","lpName","zapper","FTM_TICKER","estimateZapIn","SPOOKY_ROUTER_ADDR","estimate","TOMB_TICKER","estimateZapInToken","zapIn","zapInToken","tbondAmount","TShareSwapper","swapTBondToTShare","estimateAmountOfTShare","estimateBN","getTShareBalance","tshareBalanceBN","getTBondBalance","tbondBalanceBN","getTShareAmountPerTomb","rateTSharePerTombBN","tshareBalance","tbondBalance","rateTSharePerTomb","Context","createContext","tombFinance","TombFinanceProvider","children","useWallet","useState","setTombFinance","useEffect","unlockWallet","Provider","useTombFinance","useContext","context","banks","Banks","setBanks","isUnlocked","fetchPools","useCallback","finished","stakedBalanceOnBank","lte","earnToken","sort","b","fractionDigits","isTruncated","number","getBalance","ret","slice","pow","onPresent","onDismiss","StyledModalWrapper","styled","StyledModalBackdrop","Modals","isOpen","setIsOpen","content","setContent","handlePresent","modalContent","handleDismiss","onClick","React","isValidElement","cloneElement","RefreshContext","slow","fast","RefreshContextProvider","setSlow","setFast","interval","setInterval","prev","clearInterval","configurations","development","ChainId","MAINNET","networkName","ftmscanUrl","require","BOO","USDC","DAI","baseLaunchDate","bondLaunchesAt","masonryLaunchesAt","refreshInterval","production","sectionInUI","closedForStaking","STONEBooRewardPool","STONEUsdcRewardPool","STONEDaiRewardPool","SSHAREFtmLPSSHARERewardPool","updateBlockNumber","createAction","toggleWalletModal","toggleSettingsMenu","addPopup","removePopup","usePromptNetwork","networkPrompt","setNetworkPrompt","connectToNetwork","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","createReducer","builder","addCase","addTransaction","transactions","payload","hash","approval","summary","txs","addedTime","clearAllTransactions","checkedTransaction","tx","lastCheckedBlockNumber","Math","max","finalizeTransaction","receipt","confirmedTime","popupList","walletModalOpen","settingsMenuOpen","state","action","key","removeAfterMs","popup","concat","nanoid","show","p","PERSISTED_KEYS","store","configureStore","reducer","application","middleware","getDefaultMiddleware","thunk","save","states","preloadedState","load","teal","200","theme","borderRadius","color","black","grey","100","300","400","500","600","700","800","900","purple","primary","light","main","secondary","white","siteWidth","spacing","1","2","3","4","5","6","7","topBarSize","newTheme","createMuiTheme","palette","text","background","default","paper","dark","contrastText","disabledBackground","active","hover","typography","fontFamily","join","VISIBILITY_STATE_SUPPORTED","document","isWindowVisible","visibilityState","Updater","dispatch","useDispatch","windowVisible","focused","setFocused","listener","addEventListener","removeEventListener","useIsWindowVisible","setState","blockNumberCallback","getBlockNumber","on","removeListener","debouncedState","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDebounce","lastBlockNumber","useBlockNumber","useSelector","useAddPopup","keys","blocksSinceCheck","minutesPending","shouldCheck","getTransactionReceipt","blockHash","contractAddress","status","transactionHash","transactionIndex","txn","success","Updaters","Loader","style","position","left","top","transform","Typography","RowNoFlex","TransactionPopup","ThemeContext","paddingRight","size","StyledPopupDesc","StyledLink","target","href","span","props","ErrorPopup","message","copyErrorDetails","navigator","clipboard","writeText","StyledClose","X","Popup","Fader","AnimatedFader","animated","PopupItem","popKey","useRemovePopup","removeThisPopup","popupContent","faderStyle","useSpring","width","duration","text2","MobilePopupWrapper","height","MobilePopupInner","FixedPopupColumn","Popups","activePopups","useActivePopups","map","item","reverse","Home","lazy","Staking","Boardroom","Bonds","NoMatch","Providers","connectors","walletconnect","rpcUrl","walletlink","url","appName","appLogoUrl","App","localStorage","version_app","clear","setItem","fallback","exact","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","registration","unregister","TSHARE_TICKER","ZAPPER_ROUTER_ADDR","TAX_OFFICE_ADDR","list","useMemo"],"mappings":"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","file":"static/js/main.b74b852b.chunk.js","sourcesContent":["import { Deployments } from './deployments';\nimport { ChainId } from '@spookyswap/sdk';\n\nexport type Configuration = {\n  chainId: ChainId;\n  networkName: string;\n  ftmscanUrl: string;\n  defaultProvider: string;\n  deployments: Deployments;\n  externalTokens: { [contractName: string]: [string, number] };\n  config?: EthereumConfig;\n\n  baseLaunchDate: Date;\n  bondLaunchesAt: Date;\n  masonryLaunchesAt: Date;\n\n  refreshInterval: number;\n};\n\nexport type EthereumConfig = {\n  testing: boolean;\n  autoGasMultiplier: number;\n  defaultConfirmations: number;\n  defaultGas: string;\n  defaultGasPrice: string;\n  ethereumNodeTimeout: number;\n};\n\nexport const defaultEthereumConfig = {\n  testing: false,\n  autoGasMultiplier: 1.5,\n  defaultConfirmations: 1,\n  defaultGas: '6000000',\n  defaultGasPrice: '1000000000000',\n  ethereumNodeTimeout: 10000,\n};\n","import Web3 from 'web3';\nimport { defaultEthereumConfig, EthereumConfig } from './config';\nimport { formatUnits, parseUnits } from 'ethers/lib/utils';\nimport { BigNumber } from 'ethers';\n\nexport function web3ProviderFrom(endpoint: string, config?: EthereumConfig): any {\n  const ethConfig = Object.assign(defaultEthereumConfig, config || {});\n\n  const providerClass = endpoint.includes('wss') ? Web3.providers.WebsocketProvider : Web3.providers.HttpProvider;\n\n  return new providerClass(endpoint, {\n    timeout: ethConfig.ethereumNodeTimeout,\n  });\n}\n\nexport function balanceToDecimal(s: string): string {\n  return formatUnits(s);\n}\n\nexport function decimalToBalance(d: string | number, decimals = 18): BigNumber {\n  return parseUnits(String(d), decimals);\n}\n","import { ethers } from 'ethers';\nimport config from '../config';\nimport { web3ProviderFrom } from '../tomb-finance/ether-utils';\n\nlet provider: ethers.providers.Web3Provider = null;\n\nexport function getDefaultProvider(): ethers.providers.Web3Provider {\n  if (!provider) {\n    provider = new ethers.providers.Web3Provider(web3ProviderFrom(config.defaultProvider), config.chainId);\n  }\n\n  return provider;\n}","import { BigNumber, Contract } from 'ethers';\nimport { Signer } from '@ethersproject/abstract-signer';\nimport { Provider } from '@ethersproject/abstract-provider';\nimport { TransactionResponse } from '@ethersproject/providers';\nimport { formatUnits } from 'ethers/lib/utils';\n\nclass ERC20 {\n  private contract: Contract;\n\n  address: string;\n  symbol: string;\n  decimal: number;\n\n  constructor(address: string, provider: Signer | Provider, symbol: string, decimal = 18) {\n    this.contract = new Contract(address, ABI, provider);\n    this.address = address;\n    this.symbol = symbol;\n    this.decimal = decimal;\n  }\n\n  connect(signerOrProvider: Signer | Provider) {\n    this.contract = new Contract(this.address, ABI, signerOrProvider);\n  }\n\n  get estimateGas() {\n    return this.contract.estimateGas;\n  }\n\n  totalSupply(): Promise<BigNumber> {\n    return this.contract.totalSupply();\n  }\n\n  balanceOf(account: string): Promise<BigNumber> {\n    return this.contract.balanceOf(account);\n  }\n\n  transfer(recipient: string, amount: BigNumber): Promise<TransactionResponse> {\n    return this.contract.transfer(recipient, amount);\n  }\n\n  allowance(owner: string, spender: string): Promise<BigNumber> {\n    return this.contract.allowance(owner, spender);\n  }\n\n  approve(spender: string, amount: BigNumber): Promise<TransactionResponse> {\n    return this.contract.approve(spender, amount);\n  }\n\n  transferFrom(sender: string, recipient: string, amount: BigNumber): Promise<TransactionResponse> {\n    return this.contract.transferFrom(sender, recipient, amount);\n  }\n\n  async displayedBalanceOf(account: string): Promise<string> {\n    const balance = await this.balanceOf(account);\n    return formatUnits(balance, this.decimal);\n  }\n\n  async displayedTotalSupply(): Promise<string> {\n    const supply = await this.totalSupply();\n    return Number(formatUnits(supply, this.decimal)).toFixed(0);\n  }\n}\n\nexport default ERC20;\n\nconst ABI = [\n  {\n    inputs: [\n      { internalType: 'string', name: 'name', type: 'string' },\n      {\n        internalType: 'string',\n        name: 'symbol',\n        type: 'string',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'constructor',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'spender',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'value',\n        type: 'uint256',\n      },\n    ],\n    name: 'Approval',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'from',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'to',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'value',\n        type: 'uint256',\n      },\n    ],\n    name: 'Transfer',\n    type: 'event',\n  },\n  {\n    inputs: [],\n    name: 'name',\n    outputs: [\n      {\n        internalType: 'string',\n        name: '',\n        type: 'string',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'symbol',\n    outputs: [\n      {\n        internalType: 'string',\n        name: '',\n        type: 'string',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'decimals',\n    outputs: [\n      {\n        internalType: 'uint8',\n        name: '',\n        type: 'uint8',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'account',\n        type: 'address',\n      },\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'recipient',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'amount',\n        type: 'uint256',\n      },\n    ],\n    name: 'transfer',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'spender',\n        type: 'address',\n      },\n    ],\n    name: 'allowance',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'spender',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'amount',\n        type: 'uint256',\n      },\n    ],\n    name: 'approve',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'sender',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'recipient',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'amount',\n        type: 'uint256',\n      },\n    ],\n    name: 'transferFrom',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'spender',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'addedValue',\n        type: 'uint256',\n      },\n    ],\n    name: 'increaseAllowance',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'spender',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'subtractedValue',\n        type: 'uint256',\n      },\n    ],\n    name: 'decreaseAllowance',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n];\n","// import { Fetcher, Route, Token } from '@uniswap/sdk';\nimport { Fetcher as FetcherSpirit, Token as TokenSpirit } from '@spiritswap/sdk';\nimport { Fetcher, Route, Token } from '@spookyswap/sdk';\nimport { Configuration } from './config';\nimport { ContractName, TokenStat, AllocationTime, LPStat, Bank, PoolStats, TShareSwapperStat } from './types';\nimport { BigNumber, Contract, ethers, EventFilter } from 'ethers';\nimport { decimalToBalance } from './ether-utils';\nimport { TransactionResponse } from '@ethersproject/providers';\nimport ERC20 from './ERC20';\nimport { getFullDisplayBalance, getDisplayBalance } from '../utils/formatBalance';\nimport { getDefaultProvider } from '../utils/provider';\nimport IUniswapV2PairABI from './IUniswapV2Pair.abi.json';\nimport config, { bankDefinitions } from '../config';\nimport moment from 'moment';\nimport { parseUnits } from 'ethers/lib/utils';\nimport { FTM_TICKER, SPOOKY_ROUTER_ADDR, TOMB_TICKER } from '../utils/constants';\n/**\n * An API module of STONE Finance contracts.\n * All contract-interacting domain logic should be defined in here.\n */\nexport class TombFinance {\n  myAccount: string;\n  provider: ethers.providers.Web3Provider;\n  signer?: ethers.Signer;\n  config: Configuration;\n  contracts: { [name: string]: Contract };\n  externalTokens: { [name: string]: ERC20 };\n  masonryVersionOfUser?: string;\n\n  TOMBWFTM_LP: Contract;\n  STONE: ERC20;\n  SSHARE: ERC20;\n  SBOND: ERC20;\n  FTM: ERC20;\n\n  constructor(cfg: Configuration) {\n    const { deployments, externalTokens } = cfg;\n    const provider = getDefaultProvider();\n\n    // loads contracts from deployments\n    this.contracts = {};\n    for (const [name, deployment] of Object.entries(deployments)) {\n      this.contracts[name] = new Contract(deployment.address, deployment.abi, provider);\n    }\n    this.externalTokens = {};\n    for (const [symbol, [address, decimal]] of Object.entries(externalTokens)) {\n      this.externalTokens[symbol] = new ERC20(address, provider, symbol, decimal);\n    }\n    this.STONE = new ERC20(deployments.tomb.address, provider, 'STONE');\n    this.SSHARE = new ERC20(deployments.tShare.address, provider, 'SSHARE');\n    this.SBOND = new ERC20(deployments.tBond.address, provider, 'SBOND');\n    this.FTM = this.externalTokens['WFTM'];\n\n    // Uniswap V2 Pair\n    this.TOMBWFTM_LP = new Contract(externalTokens['STONE-FTM-LP'][0], IUniswapV2PairABI, provider);\n\n    this.config = cfg;\n    this.provider = provider;\n  }\n\n  /**\n   * @param provider From an unlocked wallet. (e.g. Metamask)\n   * @param account An address of unlocked wallet account.\n   */\n  unlockWallet(provider: any, account: string) {\n    const newProvider = new ethers.providers.Web3Provider(provider, this.config.chainId);\n    this.signer = newProvider.getSigner(0);\n    this.myAccount = account;\n    for (const [name, contract] of Object.entries(this.contracts)) {\n      this.contracts[name] = contract.connect(this.signer);\n    }\n    const tokens = [this.STONE, this.SSHARE, this.SBOND, ...Object.values(this.externalTokens)];\n    for (const token of tokens) {\n      token.connect(this.signer);\n    }\n    this.TOMBWFTM_LP = this.TOMBWFTM_LP.connect(this.signer);\n    console.log(`🔓 Wallet is unlocked. Welcome, ${account}!`);\n    this.fetchMasonryVersionOfUser()\n      .then((version) => (this.masonryVersionOfUser = version))\n      .catch((err) => {\n        console.error(`Failed to fetch masonry version: ${err.stack}`);\n        this.masonryVersionOfUser = 'latest';\n      });\n  }\n\n  get isUnlocked(): boolean {\n    return !!this.myAccount;\n  }\n\n  //===================================================================\n  //===================== GET ASSET STATS =============================\n  //===================FROM SPOOKY TO DISPLAY =========================\n  //=========================IN HOME PAGE==============================\n  //===================================================================\n\n  async getTombStat(): Promise<TokenStat> {\n    const { STONEFtmRewardPool, STONEFtmLPSTONERewardPool, STONEFtmLPSTONERewardPoolOld } = this.contracts;\n    const supply = await this.STONE.totalSupply();\n    const tombRewardPoolSupply = await this.STONE.balanceOf(STONEFtmRewardPool.address);\n    const tombRewardPoolSupply2 = await this.STONE.balanceOf(STONEFtmLPSTONERewardPool.address);\n    // const tombRewardPoolSupplyOld = await this.STONE.balanceOf(STONEFtmLPSTONERewardPoolOld.address);\n    const tombCirculatingSupply = supply\n      .sub(tombRewardPoolSupply)\n      .sub(tombRewardPoolSupply2);\n      // .sub(tombRewardPoolSupplyOld);\n    const priceInFTM = await this.getTokenPriceFromPancakeswap(this.STONE);\n    const priceOfOneFTM = await this.getWFTMPriceFromPancakeswap();\n    const priceOfTombInDollars = (Number(priceInFTM) * Number(priceOfOneFTM)).toFixed(2);\n\n    return {\n      tokenInFtm: priceInFTM,\n      priceInDollars: priceOfTombInDollars,\n      totalSupply: getDisplayBalance(supply, this.STONE.decimal, 0),\n      circulatingSupply: getDisplayBalance(tombCirculatingSupply, this.STONE.decimal, 0),\n    };\n  }\n\n  /**\n   * Calculates various stats for the requested LP\n   * @param name of the LP token to load stats for\n   * @returns\n   */\n  async getLPStat(name: string): Promise<LPStat> {\n    const lpToken = this.externalTokens[name];\n    const lpTokenSupplyBN = await lpToken.totalSupply();\n    const lpTokenSupply = getDisplayBalance(lpTokenSupplyBN, 18);\n    const token0 = name.startsWith('STONE') ? this.STONE : this.SSHARE;\n    const isTomb = name.startsWith('STONE');\n    const tokenAmountBN = await token0.balanceOf(lpToken.address);\n    const tokenAmount = getDisplayBalance(tokenAmountBN, 18);\n\n    const ftmAmountBN = await this.FTM.balanceOf(lpToken.address);\n    const ftmAmount = getDisplayBalance(ftmAmountBN, 18);\n    const tokenAmountInOneLP = Number(tokenAmount) / Number(lpTokenSupply);\n    const ftmAmountInOneLP = Number(ftmAmount) / Number(lpTokenSupply);\n    const lpTokenPrice = await this.getLPTokenPrice(lpToken, token0, isTomb);\n    const lpTokenPriceFixed = Number(lpTokenPrice).toFixed(2).toString();\n    const liquidity = (Number(lpTokenSupply) * Number(lpTokenPrice)).toFixed(2).toString();\n    return {\n      tokenAmount: tokenAmountInOneLP.toFixed(2).toString(),\n      ftmAmount: ftmAmountInOneLP.toFixed(2).toString(),\n      priceOfOne: lpTokenPriceFixed,\n      totalLiquidity: liquidity,\n      totalSupply: Number(lpTokenSupply).toFixed(2).toString(),\n    };\n  }\n\n  /**\n   * Use this method to get price for STONE\n   * @returns TokenStat for SBOND\n   * priceInFTM\n   * priceInDollars\n   * TotalSupply\n   * CirculatingSupply (always equal to total supply for bonds)\n   */\n  async getBondStat(): Promise<TokenStat> {\n    const { Treasury } = this.contracts;\n    const tombStat = await this.getTombStat();\n    const bondTombRatioBN = await Treasury.getBondPremiumRate();\n    const modifier = bondTombRatioBN / 1e18 > 1 ? bondTombRatioBN / 1e18 : 1;\n    const bondPriceInFTM = (Number(tombStat.tokenInFtm) * modifier).toFixed(2);\n    const priceOfTBondInDollars = (Number(tombStat.priceInDollars) * modifier).toFixed(2);\n    const supply = await this.SBOND.displayedTotalSupply();\n    return {\n      tokenInFtm: bondPriceInFTM,\n      priceInDollars: priceOfTBondInDollars,\n      totalSupply: supply,\n      circulatingSupply: supply,\n    };\n  }\n\n  /**\n   * @returns TokenStat for SSHARE\n   * priceInFTM\n   * priceInDollars\n   * TotalSupply\n   * CirculatingSupply (always equal to total supply for bonds)\n   */\n  async getShareStat(): Promise<TokenStat> {\n    const { STONEFtmLPSSHARERewardPool } = this.contracts;\n\n    const supply = await this.SSHARE.totalSupply();\n\n    const priceInFTM = await this.getTokenPriceFromPancakeswap(this.SSHARE);\n    const tombRewardPoolSupply = await this.SSHARE.balanceOf(STONEFtmLPSSHARERewardPool.address);\n    const tShareCirculatingSupply = supply.sub(tombRewardPoolSupply);\n    const priceOfOneFTM = await this.getWFTMPriceFromPancakeswap();\n    const priceOfSharesInDollars = (Number(priceInFTM) * Number(priceOfOneFTM)).toFixed(2);\n\n    return {\n      tokenInFtm: priceInFTM,\n      priceInDollars: priceOfSharesInDollars,\n      totalSupply: getDisplayBalance(supply, this.SSHARE.decimal, 0),\n      circulatingSupply: getDisplayBalance(tShareCirculatingSupply, this.SSHARE.decimal, 0),\n    };\n  }\n\n  async getTombStatInEstimatedTWAP(): Promise<TokenStat> {\n    const { SeigniorageOracle, STONEFtmRewardPool } = this.contracts;\n    const expectedPrice = await SeigniorageOracle.twap(this.STONE.address, ethers.utils.parseEther('1'));\n\n    const supply = await this.STONE.totalSupply();\n    const tombRewardPoolSupply = await this.STONE.balanceOf(STONEFtmRewardPool.address);\n    const tombCirculatingSupply = supply.sub(tombRewardPoolSupply);\n    return {\n      tokenInFtm: getDisplayBalance(expectedPrice),\n      priceInDollars: getDisplayBalance(expectedPrice),\n      totalSupply: getDisplayBalance(supply, this.STONE.decimal, 0),\n      circulatingSupply: getDisplayBalance(tombCirculatingSupply, this.STONE.decimal, 0),\n    };\n  }\n\n  async getTombPriceInLastTWAP(): Promise<BigNumber> {\n    const { Treasury } = this.contracts;\n    return Treasury.getStoneUpdatedPrice();\n  }\n\n  async getBondsPurchasable(): Promise<BigNumber> {\n    const { Treasury } = this.contracts;\n    return Treasury.getBurnableSTONELeft();\n  }\n\n  /**\n   * Calculates the TVL, APR and daily APR of a provided pool/bank\n   * @param bank\n   * @returns\n   */\n  async getPoolAPRs(bank: Bank): Promise<PoolStats> {\n    if (this.myAccount === undefined) return;\n    const depositToken = bank.depositToken;\n    const poolContract = this.contracts[bank.contract];\n    const depositTokenPrice = await this.getDepositTokenPriceInDollars(bank.depositTokenName, depositToken);\n    const stakeInPool = await depositToken.balanceOf(bank.address);\n    const TVL = Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\n    const stat = bank.earnTokenName === 'STONE' ? await this.getTombStat() : await this.getShareStat();\n    const tokenPerSecond = await this.getTokenPerSecond(\n      bank.earnTokenName,\n      bank.contract,\n      poolContract,\n      bank.depositTokenName,\n    );\n\n    const tokenPerHour = tokenPerSecond.mul(60).mul(60);\n    const totalRewardPricePerYear =\n      Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24).mul(365)));\n    const totalRewardPricePerDay = Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24)));\n    const totalStakingTokenInPool =\n      Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\n    const dailyAPR = (totalRewardPricePerDay / totalStakingTokenInPool) * 100;\n    const yearlyAPR = (totalRewardPricePerYear / totalStakingTokenInPool) * 100;\n    return {\n      dailyAPR: dailyAPR.toFixed(2).toString(),\n      yearlyAPR: yearlyAPR.toFixed(2).toString(),\n      TVL: TVL.toFixed(2).toString(),\n    };\n  }\n\n  /**\n   * Method to return the amount of tokens the pool yields per second\n   * @param earnTokenName the name of the token that the pool is earning\n   * @param contractName the contract of the pool/bank\n   * @param poolContract the actual contract of the pool\n   * @returns\n   */\n  async getTokenPerSecond(\n    earnTokenName: string,\n    contractName: string,\n    poolContract: Contract,\n    depositTokenName: string,\n  ) {\n    if (earnTokenName === 'STONE') {\n      if (!contractName.endsWith('STONERewardPool')) {\n        const rewardPerSecond = await poolContract.stonePerSecond();\n        if (depositTokenName === 'WFTM') {\n          return rewardPerSecond.mul(1000000).div(11000).div(24);\n        } else if (depositTokenName === 'BOO') {\n          return rewardPerSecond.mul(25000).div(11000).div(24);\n        } else if (depositTokenName === 'USDC') {\n          return rewardPerSecond.mul(20000).div(11000).div(24);\n        } else if (depositTokenName === 'DAI') {\n          return rewardPerSecond.mul(20000).div(11000).div(24);\n        }\n        return rewardPerSecond.div(24);\n      }\n      const poolStartTime = await poolContract.poolStartTime();\n      const startDateTime = new Date(poolStartTime.toNumber() * 1000);\n      const FOUR_DAYS = 4 * 24 * 60 * 60 * 1000;\n      if (Date.now() - startDateTime.getTime() > FOUR_DAYS) {\n        return await poolContract.epochStonePerSecond(1);\n      }\n      return await poolContract.epochStonePerSecond(0);\n    }\n    const rewardPerSecond = await poolContract.SsharePerSecond();\n    if (depositTokenName.startsWith('STONE')) {\n      return rewardPerSecond.mul(1000).div(2500);\n    } else {\n      return rewardPerSecond.mul(1500).div(2500);\n    }\n  }\n\n  /**\n   * Method to calculate the tokenPrice of the deposited asset in a pool/bank\n   * If the deposited token is an LP it will find the price of its pieces\n   * @param tokenName\n   * @param pool\n   * @param token\n   * @returns\n   */\n  async getDepositTokenPriceInDollars(tokenName: string, token: ERC20) {\n    let tokenPrice;\n    const priceOfOneFtmInDollars = await this.getWFTMPriceFromPancakeswap();\n    if (tokenName === 'WFTM') {\n      tokenPrice = priceOfOneFtmInDollars;\n    } else {\n      if (tokenName === 'STONE-FTM-LP') {\n        tokenPrice = await this.getLPTokenPrice(token, this.STONE, true);\n      } else if (tokenName === 'SSHARE-FTM-LP') {\n        tokenPrice = await this.getLPTokenPrice(token, this.SSHARE, false);\n      } else {\n        tokenPrice = await this.getTokenPriceFromPancakeswap(token);\n        tokenPrice = (Number(tokenPrice) * Number(priceOfOneFtmInDollars)).toString();\n      }\n    }\n    return tokenPrice;\n  }\n\n  //===================================================================\n  //===================== GET ASSET STATS =============================\n  //=========================== END ===================================\n  //===================================================================\n\n  async getCurrentEpoch(): Promise<BigNumber> {\n    const { Treasury } = this.contracts;\n    return Treasury.epoch();\n  }\n\n  async getBondOraclePriceInLastTWAP(): Promise<BigNumber> {\n    const { Treasury } = this.contracts;\n    return Treasury.getBondPremiumRate();\n  }\n\n  /**\n   * Buy bonds with cash.\n   * @param amount amount of cash to purchase bonds with.\n   */\n  async buyBonds(amount: string | number): Promise<TransactionResponse> {\n    const { Treasury } = this.contracts;\n    const treasuryTombPrice = await Treasury.getTombPrice();\n    return await Treasury.buyBonds(decimalToBalance(amount), treasuryTombPrice);\n  }\n\n  /**\n   * Redeem bonds for cash.\n   * @param amount amount of bonds to redeem.\n   */\n  async redeemBonds(amount: string): Promise<TransactionResponse> {\n    const { Treasury } = this.contracts;\n    const priceForTomb = await Treasury.getTombPrice();\n    return await Treasury.redeemBonds(decimalToBalance(amount), priceForTomb);\n  }\n\n  async getTotalValueLocked(): Promise<Number> {\n    let totalValue = 0;\n    for (const bankInfo of Object.values(bankDefinitions)) {\n      const pool = this.contracts[bankInfo.contract];\n      const token = this.externalTokens[bankInfo.depositTokenName];\n      const tokenPrice = await this.getDepositTokenPriceInDollars(bankInfo.depositTokenName, token);\n      const tokenAmountInPool = await token.balanceOf(pool.address);\n      const value = Number(getDisplayBalance(tokenAmountInPool, token.decimal)) * Number(tokenPrice);\n      const poolValue = Number.isNaN(value) ? 0 : value;\n      totalValue += poolValue;\n    }\n\n    const TSHAREPrice = (await this.getShareStat()).priceInDollars;\n    const masonrytShareBalanceOf = await this.SSHARE.balanceOf(this.currentMasonry().address);\n    const masonryTVL = Number(getDisplayBalance(masonrytShareBalanceOf, this.SSHARE.decimal)) * Number(TSHAREPrice);\n\n    return totalValue + masonryTVL;\n  }\n\n  /**\n   * Calculates the price of an LP token\n   * Reference https://github.com/DefiDebauchery/discordpricebot/blob/4da3cdb57016df108ad2d0bb0c91cd8dd5f9d834/pricebot/pricebot.py#L150\n   * @param lpToken the token under calculation\n   * @param token the token pair used as reference (the other one would be FTM in most cases)\n   * @param isTomb sanity check for usage of tomb token or tShare\n   * @returns price of the LP token\n   */\n  async getLPTokenPrice(lpToken: ERC20, token: ERC20, isTomb: boolean): Promise<string> {\n    const totalSupply = getFullDisplayBalance(await lpToken.totalSupply(), lpToken.decimal);\n    //Get amount of tokenA\n    const tokenSupply = getFullDisplayBalance(await token.balanceOf(lpToken.address), token.decimal);\n    const stat = isTomb === true ? await this.getTombStat() : await this.getShareStat();\n    const priceOfToken = stat.priceInDollars;\n    const tokenInLP = Number(tokenSupply) / Number(totalSupply);\n    const tokenPrice = (Number(priceOfToken) * tokenInLP * 2) //We multiply by 2 since half the price of the lp token is the price of each piece of the pair. So twice gives the total\n      .toString();\n    return tokenPrice;\n  }\n\n  async earnedFromBank(\n    poolName: ContractName,\n    earnTokenName: String,\n    poolId: Number,\n    account = this.myAccount,\n  ): Promise<BigNumber> {\n    const pool = this.contracts[poolName];\n    try {\n      if (earnTokenName === 'STONE') {\n        return await pool.pendingSTONE(poolId, account);\n      } else {\n        return await pool.pendingShare(poolId, account);\n      }\n    } catch (err) {\n      console.error(`Failed to call earned() on pool ${pool.address}: ${err.stack}`);\n      return BigNumber.from(0);\n    }\n  }\n\n  async stakedBalanceOnBank(poolName: ContractName, poolId: Number, account = this.myAccount): Promise<BigNumber> {\n    const pool = this.contracts[poolName];\n    try {\n      let userInfo = await pool.userInfo(poolId, account);\n      return await userInfo.amount;\n    } catch (err) {\n      console.error(`Failed to call balanceOf() on pool ${pool.address}: ${err.stack}`);\n      return BigNumber.from(0);\n    }\n  }\n\n  /**\n   * Deposits token to given pool.\n   * @param poolName A name of pool contract.\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\n   * @returns {string} Transaction hash\n   */\n  async stake(poolName: ContractName, poolId: Number, amount: BigNumber): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    return await pool.deposit(poolId, amount);\n  }\n\n  /**\n   * Withdraws token from given pool.\n   * @param poolName A name of pool contract.\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\n   * @returns {string} Transaction hash\n   */\n  async unstake(poolName: ContractName, poolId: Number, amount: BigNumber): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    return await pool.withdraw(poolId, amount);\n  }\n\n  /**\n   * Transfers earned token reward from given pool to my account.\n   */\n  async harvest(poolName: ContractName, poolId: Number): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    //By passing 0 as the amount, we are asking the contract to only redeem the reward and not the currently staked token\n    return await pool.withdraw(poolId, 0);\n  }\n\n  /**\n   * Harvests and withdraws deposited tokens from the pool.\n   */\n  async exit(poolName: ContractName, poolId: Number, account = this.myAccount): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    let userInfo = await pool.userInfo(poolId, account);\n    return await pool.withdraw(poolId, userInfo.amount);\n  }\n\n  async fetchMasonryVersionOfUser(): Promise<string> {\n    return 'latest';\n  }\n\n  currentMasonry(): Contract {\n    if (!this.masonryVersionOfUser) {\n      //throw new Error('you must unlock the wallet to continue.');\n    }\n    return this.contracts.Masonry;\n  }\n\n  isOldMasonryMember(): boolean {\n    return this.masonryVersionOfUser !== 'latest';\n  }\n\n  async getTokenPriceFromPancakeswap(tokenContract: ERC20): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    const { chainId } = this.config;\n    const { WFTM } = this.config.externalTokens;\n\n    const wftm = new Token(chainId, WFTM[0], WFTM[1]);\n    const token = new Token(chainId, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\n    try {\n      const wftmToToken = await Fetcher.fetchPairData(wftm, token, this.provider);\n      const priceInBUSD = new Route([wftmToToken], token);\n\n      return priceInBUSD.midPrice.toFixed(4);\n    } catch (err) {\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\n    }\n  }\n\n  async getTokenPriceFromSpiritswap(tokenContract: ERC20): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    const { chainId } = this.config;\n\n    const { WFTM } = this.externalTokens;\n\n    const wftm = new TokenSpirit(chainId, WFTM.address, WFTM.decimal);\n    const token = new TokenSpirit(chainId, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\n    try {\n      const wftmToToken = await FetcherSpirit.fetchPairData(wftm, token, this.provider);\n      const liquidityToken = wftmToToken.liquidityToken;\n      let ftmBalanceInLP = await WFTM.balanceOf(liquidityToken.address);\n      let ftmAmount = Number(getFullDisplayBalance(ftmBalanceInLP, WFTM.decimal));\n      let shibaBalanceInLP = await tokenContract.balanceOf(liquidityToken.address);\n      let shibaAmount = Number(getFullDisplayBalance(shibaBalanceInLP, tokenContract.decimal));\n      const priceOfOneFtmInDollars = await this.getWFTMPriceFromPancakeswap();\n      let priceOfShiba = (ftmAmount / shibaAmount) * Number(priceOfOneFtmInDollars);\n      return priceOfShiba.toString();\n    } catch (err) {\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\n    }\n  }\n\n  async getWFTMPriceFromPancakeswap(): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    const { WFTM, FUSDT } = this.externalTokens;\n    try {\n      const fusdt_wftm_lp_pair = this.externalTokens['USDT-FTM-LP'];\n      let ftm_amount_BN = await WFTM.balanceOf(fusdt_wftm_lp_pair.address);\n      let ftm_amount = Number(getFullDisplayBalance(ftm_amount_BN, WFTM.decimal));\n      let fusdt_amount_BN = await FUSDT.balanceOf(fusdt_wftm_lp_pair.address);\n      let fusdt_amount = Number(getFullDisplayBalance(fusdt_amount_BN, FUSDT.decimal));\n      return (fusdt_amount / ftm_amount).toString();\n    } catch (err) {\n      console.error(`Failed to fetch token price of WFTM: ${err}`);\n    }\n  }\n\n  //===================================================================\n  //===================================================================\n  //===================== MASONRY METHODS =============================\n  //===================================================================\n  //===================================================================\n\n  async getMasonryAPR() {\n    const Masonry = this.currentMasonry();\n    const latestSnapshotIndex = await Masonry.latestSnapshotIndex();\n    const lastHistory = await Masonry.boardroomHistory(latestSnapshotIndex);\n\n    const lastRewardsReceived = lastHistory[1];\n\n    const TSHAREPrice = (await this.getShareStat()).priceInDollars;\n    const TOMBPrice = (await this.getTombStat()).priceInDollars;\n    const epochRewardsPerShare = lastRewardsReceived / 1e18;\n\n    //Mgod formula\n    const amountOfRewardsPerDay = epochRewardsPerShare * Number(TOMBPrice) * 4;\n    const masonrytShareBalanceOf = await this.SSHARE.balanceOf(Masonry.address);\n    const masonryTVL = Number(getDisplayBalance(masonrytShareBalanceOf, this.SSHARE.decimal)) * Number(TSHAREPrice);\n    const realAPR = ((amountOfRewardsPerDay * 100) / masonryTVL) * 365;\n    return realAPR;\n  }\n\n  /**\n   * Checks if the user is allowed to retrieve their reward from the Masonry\n   * @returns true if user can withdraw reward, false if they can't\n   */\n  async canUserClaimRewardFromMasonry(): Promise<boolean> {\n    const Masonry = this.currentMasonry();\n    return await Masonry.canClaimReward(this.myAccount);\n  }\n\n  /**\n   * Checks if the user is allowed to retrieve their reward from the Masonry\n   * @returns true if user can withdraw reward, false if they can't\n   */\n  async canUserUnstakeFromMasonry(): Promise<boolean> {\n    const Masonry = this.currentMasonry();\n    const canWithdraw = await Masonry.canWithdraw(this.myAccount);\n    const stakedAmount = await this.getStakedSharesOnMasonry();\n    const notStaked = Number(getDisplayBalance(stakedAmount, this.SSHARE.decimal)) === 0;\n    const result = notStaked ? true : canWithdraw;\n    return result;\n  }\n\n  async timeUntilClaimRewardFromMasonry(): Promise<BigNumber> {\n    // const Masonry = this.currentMasonry();\n    // const mason = await Masonry.masons(this.myAccount);\n    return BigNumber.from(0);\n  }\n\n  async getTotalStakedInMasonry(): Promise<BigNumber> {\n    const Masonry = this.currentMasonry();\n    return await Masonry.totalSupply();\n  }\n\n  async stakeShareToMasonry(amount: string): Promise<TransactionResponse> {\n    if (this.isOldMasonryMember()) {\n      throw new Error(\"you're using old masonry. please withdraw and deposit the SSHARE again.\");\n    }\n    const Masonry = this.currentMasonry();\n    return await Masonry.stake(decimalToBalance(amount));\n  }\n\n  async getStakedSharesOnMasonry(): Promise<BigNumber> {\n    const Masonry = this.currentMasonry();\n    if (this.masonryVersionOfUser === 'v1') {\n      return await Masonry.getShareOf(this.myAccount);\n    }\n    return await Masonry.balanceOf(this.myAccount);\n  }\n\n  async getEarningsOnMasonry(): Promise<BigNumber> {\n    const Masonry = this.currentMasonry();\n    if (this.masonryVersionOfUser === 'v1') {\n      return await Masonry.getCashEarningsOf(this.myAccount);\n    }\n    return await Masonry.earned(this.myAccount);\n  }\n\n  async withdrawShareFromMasonry(amount: string): Promise<TransactionResponse> {\n    const Masonry = this.currentMasonry();\n    return await Masonry.withdraw(decimalToBalance(amount));\n  }\n\n  async harvestCashFromMasonry(): Promise<TransactionResponse> {\n    const Masonry = this.currentMasonry();\n    if (this.masonryVersionOfUser === 'v1') {\n      return await Masonry.claimDividends();\n    }\n    return await Masonry.claimReward();\n  }\n\n  async exitFromMasonry(): Promise<TransactionResponse> {\n    const Masonry = this.currentMasonry();\n    return await Masonry.exit();\n  }\n\n  async getTreasuryNextAllocationTime(): Promise<AllocationTime> {\n    const { Treasury } = this.contracts;\n    const nextEpochTimestamp: BigNumber = await Treasury.nextEpochPoint();\n    const nextAllocation = new Date(nextEpochTimestamp.mul(1000).toNumber());\n    const prevAllocation = new Date(Date.now());\n\n    return { from: prevAllocation, to: nextAllocation };\n  }\n  /**\n   * This method calculates and returns in a from to to format\n   * the period the user needs to wait before being allowed to claim\n   * their reward from the masonry\n   * @returns Promise<AllocationTime>\n   */\n  async getUserClaimRewardTime(): Promise<AllocationTime> {\n    const { Masonry, Treasury } = this.contracts;\n    const nextEpochTimestamp = await Masonry.nextEpochPoint(); //in unix timestamp\n    const currentEpoch = await Masonry.epoch();\n    const mason = await Masonry.boards(this.myAccount);\n    const startTimeEpoch = mason.epochTimerStart;\n    const period = await Treasury.PERIOD();\n    const periodInHours = period / 60 / 60; // 6 hours, period is displayed in seconds which is 21600\n    const rewardLockupEpochs = await Masonry.rewardLockupEpochs();\n    const targetEpochForClaimUnlock = Number(startTimeEpoch) + Number(rewardLockupEpochs);\n\n    const fromDate = new Date(Date.now());\n    if (targetEpochForClaimUnlock - currentEpoch <= 0) {\n      return { from: fromDate, to: fromDate };\n    } else if (targetEpochForClaimUnlock - currentEpoch === 1) {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      return { from: fromDate, to: toDate };\n    } else {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      const delta = targetEpochForClaimUnlock - currentEpoch - 1;\n      const endDate = moment(toDate)\n        .add(delta * periodInHours, 'hours')\n        .toDate();\n      return { from: fromDate, to: endDate };\n    }\n  }\n\n  /**\n   * This method calculates and returns in a from to to format\n   * the period the user needs to wait before being allowed to unstake\n   * from the masonry\n   * @returns Promise<AllocationTime>\n   */\n  async getUserUnstakeTime(): Promise<AllocationTime> {\n    const { Masonry, Treasury } = this.contracts;\n    const nextEpochTimestamp = await Masonry.nextEpochPoint();\n    const currentEpoch = await Masonry.epoch();\n    const mason = await Masonry.boards(this.myAccount);\n    const startTimeEpoch = mason.epochTimerStart;\n    const period = await Treasury.PERIOD();\n    const PeriodInHours = period / 60 / 60;\n    const withdrawLockupEpochs = await Masonry.withdrawLockupEpochs();\n    const fromDate = new Date(Date.now());\n    const targetEpochForClaimUnlock = Number(startTimeEpoch) + Number(withdrawLockupEpochs);\n    const stakedAmount = await this.getStakedSharesOnMasonry();\n    if (currentEpoch <= targetEpochForClaimUnlock && Number(stakedAmount) === 0) {\n      return { from: fromDate, to: fromDate };\n    } else if (targetEpochForClaimUnlock - currentEpoch === 1) {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      return { from: fromDate, to: toDate };\n    } else {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      const delta = targetEpochForClaimUnlock - Number(currentEpoch) - 1;\n      const endDate = moment(toDate)\n        .add(delta * PeriodInHours, 'hours')\n        .toDate();\n      return { from: fromDate, to: endDate };\n    }\n  }\n\n  async watchAssetInMetamask(assetName: string): Promise<boolean> {\n    const { ethereum } = window as any;\n    if (ethereum && ethereum.networkVersion === config.chainId.toString()) {\n      let asset;\n      let assetUrl;\n      if (assetName === 'STONE') {\n        asset = this.STONE;\n        assetUrl = 'https://maynardrodgers.github.io/imgs/stone.png';\n      } else if (assetName === 'SSHARE') {\n        asset = this.SSHARE;\n        assetUrl = 'https://maynardrodgers.github.io/imgs/sshares.png';\n      } else if (assetName === 'SBOND') {\n        asset = this.SBOND;\n        assetUrl = 'https://maynardrodgers.github.io/imgs/sbonds.png';\n      }\n      await ethereum.request({\n        method: 'wallet_watchAsset',\n        params: {\n          type: 'ERC20',\n          options: {\n            address: asset.address,\n            symbol: asset.symbol,\n            decimals: 18,\n            image: assetUrl,\n          },\n        },\n      });\n    }\n    return true;\n  }\n\n  async provideTombFtmLP(ftmAmount: string, tombAmount: BigNumber): Promise<TransactionResponse> {\n    const { TaxOffice } = this.contracts;\n    let overrides = {\n      value: parseUnits(ftmAmount, 18),\n    };\n    return await TaxOffice.addLiquidityETHTaxFree(tombAmount, tombAmount.mul(992).div(1000), parseUnits(ftmAmount, 18).mul(992).div(1000), overrides);\n  }\n\n  async quoteFromSpooky(tokenAmount: string, tokenName: string): Promise<string> {\n    const { SpookyRouter } = this.contracts;\n    const { _reserve0, _reserve1 } = await this.TOMBWFTM_LP.getReserves();\n    let quote;\n    if (tokenName === 'STONE') {\n      quote = await SpookyRouter.quote(parseUnits(tokenAmount), _reserve1, _reserve0);\n    } else {\n      quote = await SpookyRouter.quote(parseUnits(tokenAmount), _reserve0, _reserve1);\n    }\n    return (quote / 1e18).toString();\n  }\n\n  /**\n   * @returns an array of the regulation events till the most up to date epoch\n   */\n  async listenForRegulationsEvents(): Promise<any> {\n    const { Treasury } = this.contracts;\n\n    const treasuryDaoFundedFilter = Treasury.filters.DaoFundFunded();\n    const treasuryDevFundedFilter = Treasury.filters.DevFundFunded();\n    const treasuryMasonryFundedFilter = Treasury.filters.MasonryFunded();\n    const boughtBondsFilter = Treasury.filters.BoughtBonds();\n    const redeemBondsFilter = Treasury.filters.RedeemedBonds();\n\n    let epochBlocksRanges: any[] = [];\n    let masonryFundEvents = await Treasury.queryFilter(treasuryMasonryFundedFilter);\n    var events: any[] = [];\n    masonryFundEvents.forEach(function callback(value, index) {\n      events.push({ epoch: index + 1 });\n      events[index].masonryFund = getDisplayBalance(value.args[1]);\n      if (index === 0) {\n        epochBlocksRanges.push({\n          index: index,\n          startBlock: value.blockNumber,\n          boughBonds: 0,\n          redeemedBonds: 0,\n        });\n      }\n      if (index > 0) {\n        epochBlocksRanges.push({\n          index: index,\n          startBlock: value.blockNumber,\n          boughBonds: 0,\n          redeemedBonds: 0,\n        });\n        epochBlocksRanges[index - 1].endBlock = value.blockNumber;\n      }\n    });\n\n    epochBlocksRanges.forEach(async (value, index) => {\n      events[index].bondsBought = await this.getBondsWithFilterForPeriod(\n        boughtBondsFilter,\n        value.startBlock,\n        value.endBlock,\n      );\n      events[index].bondsRedeemed = await this.getBondsWithFilterForPeriod(\n        redeemBondsFilter,\n        value.startBlock,\n        value.endBlock,\n      );\n    });\n    let DEVFundEvents = await Treasury.queryFilter(treasuryDevFundedFilter);\n    DEVFundEvents.forEach(function callback(value, index) {\n      events[index].devFund = getDisplayBalance(value.args[1]);\n    });\n    let DAOFundEvents = await Treasury.queryFilter(treasuryDaoFundedFilter);\n    DAOFundEvents.forEach(function callback(value, index) {\n      events[index].daoFund = getDisplayBalance(value.args[1]);\n    });\n    return events;\n  }\n\n  /**\n   * Helper method\n   * @param filter applied on the query to the treasury events\n   * @param from block number\n   * @param to block number\n   * @returns the amount of bonds events emitted based on the filter provided during a specific period\n   */\n  async getBondsWithFilterForPeriod(filter: EventFilter, from: number, to: number): Promise<number> {\n    const { Treasury } = this.contracts;\n    const bondsAmount = await Treasury.queryFilter(filter, from, to);\n    return bondsAmount.length;\n  }\n\n  async estimateZapIn(tokenName: string, lpName: string, amount: string): Promise<number[]> {\n    const { zapper } = this.contracts;\n    const lpToken = this.externalTokens[lpName];\n    let estimate;\n    if (tokenName === FTM_TICKER) {\n      estimate = await zapper.estimateZapIn(lpToken.address, SPOOKY_ROUTER_ADDR, parseUnits(amount, 18));\n    } else {\n      const token = tokenName === TOMB_TICKER ? this.STONE : this.SSHARE;\n      estimate = await zapper.estimateZapInToken(\n        token.address,\n        lpToken.address,\n        SPOOKY_ROUTER_ADDR,\n        parseUnits(amount, 18),\n      );\n    }\n    return [estimate[0] / 1e18, estimate[1] / 1e18];\n  }\n  async zapIn(tokenName: string, lpName: string, amount: string): Promise<TransactionResponse> {\n    const { zapper } = this.contracts;\n    const lpToken = this.externalTokens[lpName];\n    if (tokenName === FTM_TICKER) {\n      let overrides = {\n        value: parseUnits(amount, 18),\n      };\n      return await zapper.zapIn(lpToken.address, SPOOKY_ROUTER_ADDR, this.myAccount, overrides);\n    } else {\n      const token = tokenName === TOMB_TICKER ? this.STONE : this.SSHARE;\n      return await zapper.zapInToken(\n        token.address,\n        parseUnits(amount, 18),\n        lpToken.address,\n        SPOOKY_ROUTER_ADDR,\n        this.myAccount,\n      );\n    }\n  }\n  async swapTBondToTShare(tbondAmount: BigNumber): Promise<TransactionResponse> {\n    const { TShareSwapper } = this.contracts;\n    return await TShareSwapper.swapTBondToTShare(tbondAmount);\n  }\n  async estimateAmountOfTShare(tbondAmount: string): Promise<string> {\n    const { TShareSwapper } = this.contracts;\n    try {\n      const estimateBN = await TShareSwapper.estimateAmountOfTShare(parseUnits(tbondAmount, 18));\n      return getDisplayBalance(estimateBN, 18, 6);\n    } catch (err) {\n      console.error(`Failed to fetch estimate tshare amount: ${err}`);\n    }\n  }\n\n  async getTShareSwapperStat(address: string): Promise<TShareSwapperStat> {\n    const { TShareSwapper } = this.contracts;\n    const tshareBalanceBN = await TShareSwapper.getTShareBalance();\n    const tbondBalanceBN = await TShareSwapper.getTBondBalance(address);\n    // const tombPriceBN = await TShareSwapper.getTombPrice();\n    // const tsharePriceBN = await TShareSwapper.getTSharePrice();\n    const rateTSharePerTombBN = await TShareSwapper.getTShareAmountPerTomb();\n    const tshareBalance = getDisplayBalance(tshareBalanceBN, 18, 5);\n    const tbondBalance = getDisplayBalance(tbondBalanceBN, 18, 5);\n    return {\n      tshareBalance: tshareBalance.toString(),\n      tbondBalance: tbondBalance.toString(),\n      // tombPrice: tombPriceBN.toString(),\n      // tsharePrice: tsharePriceBN.toString(),\n      rateTSharePerTomb: rateTSharePerTombBN.toString(),\n    };\n  }\n}\n","import React, { createContext, useEffect, useState } from 'react';\nimport { useWallet } from 'use-wallet';\nimport TombFinance from '../../tomb-finance';\nimport config from '../../config';\n\nexport interface TombFinanceContext {\n  tombFinance?: TombFinance;\n}\n\nexport const Context = createContext<TombFinanceContext>({ tombFinance: null });\n\nexport const TombFinanceProvider: React.FC = ({ children }) => {\n  const { ethereum, account } = useWallet();\n  const [tombFinance, setTombFinance] = useState<TombFinance>();\n\n  useEffect(() => {\n    if (!tombFinance) {\n      const tomb = new TombFinance(config);\n      if (account) {\n        // wallet was unlocked at initialization\n        tomb.unlockWallet(ethereum, account);\n      }\n      setTombFinance(tomb);\n    } else if (account) {\n      tombFinance.unlockWallet(ethereum, account);\n    }\n  }, [account, ethereum, tombFinance]);\n\n  return <Context.Provider value={{ tombFinance }}>{children}</Context.Provider>;\n};\n","import { useContext } from 'react';\nimport { Context } from '../contexts/TombFinanceProvider';\n\nconst useTombFinance = () => {\n  const { tombFinance } = useContext(Context);\n  return tombFinance;\n};\n\nexport default useTombFinance;\n","import { createContext } from 'react';\nimport { Bank } from '../../tomb-finance';\n\nexport interface BanksContext {\n  banks: Bank[];\n}\n\nconst context = createContext<BanksContext>({\n  banks: [],\n});\n\nexport default context;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport Context from './context';\nimport useTombFinance from '../../hooks/useTombFinance';\nimport { Bank } from '../../tomb-finance';\nimport config, { bankDefinitions } from '../../config';\n\nconst Banks: React.FC = ({ children }) => {\n  const [banks, setBanks] = useState<Bank[]>([]);\n  const tombFinance = useTombFinance();\n  const isUnlocked = tombFinance?.isUnlocked;\n\n  const fetchPools = useCallback(async () => {\n    const banks: Bank[] = [];\n\n    for (const bankInfo of Object.values(bankDefinitions)) {\n      if (bankInfo.finished) {\n        if (!tombFinance.isUnlocked) continue;\n\n        // only show pools staked by user\n        const balance = await tombFinance.stakedBalanceOnBank(\n          bankInfo.contract,\n          bankInfo.poolId,\n          tombFinance.myAccount,\n        );\n        if (balance.lte(0)) {\n          continue;\n        }\n      }\n      banks.push({\n        ...bankInfo,\n        address: config.deployments[bankInfo.contract].address,\n        depositToken: tombFinance.externalTokens[bankInfo.depositTokenName],\n        earnToken: bankInfo.earnTokenName === 'STONE' ? tombFinance.STONE : tombFinance.SSHARE,\n      });\n    }\n    banks.sort((a, b) => (a.sort > b.sort ? 1 : -1));\n    setBanks(banks);\n  }, [tombFinance, setBanks]);\n\n  useEffect(() => {\n    if (tombFinance) {\n      fetchPools().catch((err) => console.error(`Failed to fetch pools: ${err.stack}`));\n    }\n  }, [isUnlocked, tombFinance, fetchPools]);\n\n  return <Context.Provider value={{ banks }}>{children}</Context.Provider>;\n};\n\nexport default Banks;\n","import { BigNumber } from 'ethers';\n\nexport const getDisplayBalance = (\n  balance: BigNumber,\n  decimals = 18,\n  fractionDigits = 4,\n  isTruncated: boolean = false,\n) => {\n  if (decimals === 0) {\n    fractionDigits = 0;\n  }\n  const number = getBalance(balance, decimals - fractionDigits);\n  const ret = (number / 10 ** fractionDigits).toFixed(fractionDigits);\n  if (ret.length > 12 && isTruncated) {\n    return ret.slice(0, 12) + '...';\n  }\n  return ret;\n};\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18, isTruncated = false) => {\n  return getDisplayBalance(balance, decimals, 4, isTruncated);\n};\n\nexport function getBalance(balance: BigNumber, decimals = 18): number {\n  return Number(balance.div(BigNumber.from(10).pow(decimals)));\n}\n","import React, { createContext, useCallback, useState } from 'react';\nimport styled from 'styled-components';\n\ninterface ModalsContext {\n  content?: React.ReactNode;\n  isOpen?: boolean;\n  onPresent: (content: React.ReactNode) => void;\n  onDismiss: () => void;\n}\n\nexport const Context = createContext<ModalsContext>({\n  onPresent: () => {},\n  onDismiss: () => {},\n});\n\nconst Modals: React.FC = ({ children }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [content, setContent] = useState<React.ReactNode>();\n\n  const handlePresent = useCallback(\n    (modalContent: React.ReactNode) => {\n      setContent(modalContent);\n      setIsOpen(true);\n    },\n    [setContent, setIsOpen],\n  );\n\n  const handleDismiss = useCallback(() => {\n    setContent(undefined);\n    setIsOpen(false);\n  }, [setContent, setIsOpen]);\n\n  return (\n    <Context.Provider\n      value={{\n        content,\n        isOpen,\n        onPresent: handlePresent,\n        onDismiss: handleDismiss,\n      }}\n    >\n      {children}\n      {isOpen && (\n        <StyledModalWrapper>\n          <StyledModalBackdrop onClick={handleDismiss} />\n          {React.isValidElement(content) &&\n            React.cloneElement(content, {\n              onDismiss: handleDismiss,\n            })}\n        </StyledModalWrapper>\n      )}\n    </Context.Provider>\n  );\n};\n\nconst StyledModalWrapper = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: center;\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n`;\n\nconst StyledModalBackdrop = styled.div`\n  background-color: #00000088;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n`;\n\nexport default Modals;\n","import React, { useState, useEffect } from 'react'\n\nconst FAST_INTERVAL = 10000\nconst SLOW_INTERVAL = 60000\n\nexport const RefreshContext = React.createContext({ slow: 0, fast: 0 })\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nexport const RefreshContextProvider: React.FC = ({ children }) => {\n  const [slow, setSlow] = useState(0)\n  const [fast, setFast] = useState(0)\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setFast((prev) => prev + 1)\n    }, FAST_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    const interval = setInterval(async () => { \n      setSlow((prev) => prev + 1)\n    }, SLOW_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\n}\n\n","// import { ChainId } from '@pancakeswap-libs/sdk';\nimport { ChainId } from '@spookyswap/sdk';\nimport { Configuration } from './tomb-finance/config';\nimport { BankInfo } from './tomb-finance';\n\nconst configurations: { [env: string]: Configuration } = {\n  // development: {\n  //   chainId: ChainId.FTMTESTNET,\n  //   networkName: 'Fantom Opera Testnet',\n  //   ftmscanUrl: 'https://testnet.ftmscan.com',\n  //   defaultProvider: 'https://rpc.testnet.fantom.network/',\n  //   deployments: require('./tomb-finance/deployments/deployments.testing.json'),\n  //   externalTokens: {\n  //     WFTM: ['0xf1277d1ed8ad466beddf92ef448a132661956621', 18],\n  //     FUSDT: ['0xb7f24e6e708eabfaa9e64b40ee21a5adbffb51d6', 6],\n  //     BOO: ['0x14f0C98e6763a5E13be5CE014d36c2b69cD94a1e', 18],\n  //     ZOO: ['0x2317610e609674e53D9039aaB85D8cAd8485A7c5', 0],\n  //     SHIBA: ['0x39523112753956d19A3d6a30E758bd9FF7a8F3C0', 9],\n  //     'USDT-FTM-LP': ['0xE7e3461C2C03c18301F66Abc9dA1F385f45047bA', 18],\n  //     'STONE-FTM-LP': ['0x13Fe199F19c8F719652985488F150762A5E9c3A8', 18],\n  //     'SSHARE-FTM-LP': ['0x20bc90bB41228cb9ab412036F80CE4Ef0cAf1BD5', 18],\n  //   },\n  //   baseLaunchDate: new Date('2021-06-02 13:00:00Z'),\n  //   bondLaunchesAt: new Date('2020-12-03T15:00:00Z'),\n  //   masonryLaunchesAt: new Date('2020-12-11T00:00:00Z'),\n  //   refreshInterval: 10000,\n  // },\n  development: {\n    chainId: ChainId.MAINNET,\n    networkName: 'Fantom Opera Mainnet',\n    ftmscanUrl: 'https://ftmscan.com',\n    defaultProvider: 'https://rpc.ftm.tools/',\n    deployments: require('./tomb-finance/deployments/deployments.mainnet.json'),\n    externalTokens: {\n      WFTM: ['0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83', 18],\n      FUSDT: ['0x04068DA6C83AFCFA0e13ba15A6696662335D5B75', 6], // This is actually usdc on mainnet not fusdt\n      BOO: ['0x841FAD6EAe12c286d1Fd18d1d525DFfA75C7EFFE', 18],\n      USDC: ['0x04068DA6C83AFCFA0e13ba15A6696662335D5B75', 6],\n      DAI: ['0x8D11eC38a3EB5E956B052f67Da8Bdc9bef8Abf3E', 9],\n      'USDT-FTM-LP': ['0x2b4C76d0dc16BE1C31D4C1DC53bF9B45987Fc75c', 18],\n      'STONE-FTM-LP': ['0x878FF079892Da1d4Da6F29aD154b4CFb18463CeF', 18],\n      'SSHARE-FTM-LP': ['0x642Dae5853B579AEda09D8AC6CAE8e3fc4DD50d3', 18],\n    },\n    baseLaunchDate: new Date('2021-06-02 13:00:00Z'),\n    bondLaunchesAt: new Date('2020-12-03T15:00:00Z'),\n    masonryLaunchesAt: new Date('2020-12-11T00:00:00Z'),\n    refreshInterval: 5000,\n  },\n  production: {\n    chainId: ChainId.MAINNET,\n    networkName: 'Fantom Opera Mainnet',\n    ftmscanUrl: 'https://ftmscan.com',\n    defaultProvider: 'https://rpc.ftm.tools/',\n    deployments: require('./tomb-finance/deployments/deployments.mainnet.json'),\n    externalTokens: {\n      WFTM: ['0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83', 18],\n      FUSDT: ['0x04068DA6C83AFCFA0e13ba15A6696662335D5B75', 6], // This is actually usdc on mainnet not fusdt\n      BOO: ['0x841FAD6EAe12c286d1Fd18d1d525DFfA75C7EFFE', 18],\n      USDC: ['0x04068DA6C83AFCFA0e13ba15A6696662335D5B75', 6],\n      DAI: ['0x8D11eC38a3EB5E956B052f67Da8Bdc9bef8Abf3E', 9],\n      'USDT-FTM-LP': ['0x2b4C76d0dc16BE1C31D4C1DC53bF9B45987Fc75c', 18],\n      'STONE-FTM-LP': ['0x878FF079892Da1d4Da6F29aD154b4CFb18463CeF', 18],\n      'SSHARE-FTM-LP': ['0x642Dae5853B579AEda09D8AC6CAE8e3fc4DD50d3', 18],\n    },\n    baseLaunchDate: new Date('2022-03-02 13:00:00Z'),\n    bondLaunchesAt: new Date('2022-02-03T15:00:00Z'),\n    masonryLaunchesAt: new Date('2022-02-11T00:00:00Z'),\n    refreshInterval: 5000,\n  },\n};\n\nexport const bankDefinitions: { [contractName: string]: BankInfo } = {\n  /*\n  Explanation:\n  name: description of the card\n  poolId: the poolId assigned in the contract\n  sectionInUI: way to distinguish in which of the 3 pool groups it should be listed\n        - 0 = Single asset stake pools\n        - 1 = LP asset staking rewarding STONE\n        - 2 = LP asset staking rewarding SSHARE\n  contract: the contract name which will be loaded from the deployment.environmnet.json\n  depositTokenName : the name of the token to be deposited\n  earnTokenName: the rewarded token\n  finished: will disable the pool on the UI if set to true\n  sort: the order of the pool\n  */\n  STONEFtmRewardPool: {\n    name: 'Earn STONE by FTM',\n    poolId: 0,\n    sectionInUI: 0,\n    contract: 'STONEFtmRewardPool',\n    depositTokenName: 'WFTM',\n    earnTokenName: 'STONE',\n    finished: false,\n    sort: 1,\n    closedForStaking: false,\n  },\n  STONEBooRewardPool: {\n    name: 'Earn STONE by BOO',\n    poolId: 1,\n    sectionInUI: 0,\n    contract: 'STONEBooGenesisRewardPool',\n    depositTokenName: 'BOO',\n    earnTokenName: 'STONE',\n    finished: false,\n    sort: 2,\n    closedForStaking: false,\n  },\n  STONEUsdcRewardPool: {\n    name: 'Earn STONE by USDC',\n    poolId: 2,\n    sectionInUI: 0,\n    contract: 'STONEUsdcGenesisRewardPool',\n    depositTokenName: 'USDC',\n    earnTokenName: 'STONE',\n    finished: false,\n    sort: 3,\n    closedForStaking: false,\n  },\n  STONEDaiRewardPool: {\n    name: 'Earn STONE by DAI',\n    poolId: 3,\n    sectionInUI: 0,\n    contract: 'STONEDaiGenesisRewardPool',\n    depositTokenName: 'DAI',\n    earnTokenName: 'STONE',\n    finished: false,\n    sort: 4,\n    closedForStaking: false,\n  },\n  STONEFtmLPSTONERewardPool: {\n    name: 'Earn STONE by STONE-FTM LP',\n    poolId: 0,\n    sectionInUI: 1,\n    contract: 'STONEFtmLPSTONERewardPool',\n    depositTokenName: 'STONE-FTM-LP',\n    earnTokenName: 'STONE',\n    finished: false,\n    sort: 5,\n    closedForStaking: false,\n  },\n  STONEFtmLPSTONERewardPoolOld: {\n    name: 'Earn STONE by STONE-FTM LP',\n    poolId: 0,\n    sectionInUI: 1,\n    contract: 'STONEFtmLPSTONERewardPoolOld',\n    depositTokenName: 'STONE-FTM-LP',\n    earnTokenName: 'STONE',\n    finished: true,\n    sort: 9,\n    closedForStaking: false,\n  },\n  STONEFtmLPSSHARERewardPool: {\n    name: 'Earn SSHARE by STONE-FTM LP',\n    poolId: 0,\n    sectionInUI: 2,\n    contract: 'STONEFtmLPSSHARERewardPool',\n    depositTokenName: 'STONE-FTM-LP',\n    earnTokenName: 'SSHARE',\n    finished: false,\n    sort: 6,\n    closedForStaking: false,\n  },\n  SSHAREFtmLPSSHARERewardPool: {\n    name: 'Earn SSHARE by SSHARE-FTM LP',\n    poolId: 1,\n    sectionInUI: 2,\n    contract: 'SSHAREFtmLPSSHARERewardPool',\n    depositTokenName: 'SSHARE-FTM-LP',\n    earnTokenName: 'SSHARE',\n    finished: false,\n    sort: 7,\n    closedForStaking: false,\n  },\n};\n\nexport default configurations[process.env.NODE_ENV || 'development'];\n","import { createAction } from '@reduxjs/toolkit';\n\nexport type PopupContent = {\n  txn?: {\n    hash: string;\n    success: boolean;\n    summary?: string;\n  };\n  error?: {\n    message: string;\n    stack: string;\n  };\n};\n\nexport const updateBlockNumber = createAction<{ chainId: number; blockNumber: number }>('app/updateBlockNumber');\n\nexport const toggleWalletModal = createAction<void>('app/toggleWalletModal');\n\nexport const toggleSettingsMenu = createAction<void>('app/toggleSettingsMenu');\n\nexport const addPopup = createAction<{\n  key?: string;\n  removeAfterMs?: number | null;\n  content: PopupContent;\n}>('app/addPopup');\n\nexport const removePopup = createAction<{ key: string }>('app/removePopup');\n","import { useEffect, useState } from 'react';\nimport config from './../config';\n\nconst usePromptNetwork = () => {\n  const [networkPrompt, setNetworkPrompt] = useState(false);\n  const { ethereum } = window as any;\n\n  /**\n   * For more read https://github.com/NoahZinsmeister/web3-react/blob/6737868693adb7e1e28ae80499e19901e9aae45a/example/hooks.ts#L33\n   * And https://docs.metamask.io/guide/ethereum-provider.html\n   * @param provider ethereum provider in this case is the window.ethereum available due to metamask being installed\n   * @returns\n   */\n  const connectToNetwork = async (provider: any) => {\n    await provider.request({\n      method: 'wallet_addEthereumChain',\n      params: [\n        {\n          chainId: `0x${config.chainId.toString(16)}`,\n          chainName: config.networkName,\n          nativeCurrency: {\n            name: 'FTM',\n            symbol: 'ftm',\n            decimals: 18,\n          },\n          rpcUrls: [config.defaultProvider],\n          blockExplorerUrls: [config.ftmscanUrl],\n        },\n      ],\n    });\n  };\n  useEffect(() => {\n    if (!networkPrompt) {\n      if (ethereum && ethereum.networkVersion !== config.chainId.toString()) {\n        connectToNetwork(ethereum);\n        setNetworkPrompt(true);\n      }\n    }\n  }, [networkPrompt, ethereum]);\n};\n\nexport default usePromptNetwork;\n","import { createReducer } from '@reduxjs/toolkit';\nimport {\n  addTransaction,\n  checkedTransaction,\n  clearAllTransactions,\n  finalizeTransaction,\n  SerializableTransactionReceipt,\n} from './actions';\n\nconst now = () => new Date().getTime();\n\nexport interface TransactionDetails {\n  hash: string;\n  approval?: { tokenAddress: string; spender: string };\n  summary?: string;\n  receipt?: SerializableTransactionReceipt;\n  lastCheckedBlockNumber?: number;\n  addedTime: number;\n  confirmedTime?: number;\n  from: string;\n}\n\nexport interface TransactionState {\n  [chainId: number]: {\n    [txHash: string]: TransactionDetails;\n  };\n}\n\nexport const initialState: TransactionState = {};\n\nexport default createReducer(initialState, (builder) =>\n  builder\n    .addCase(addTransaction, (transactions, { payload: { chainId, from, hash, approval, summary } }) => {\n      if (transactions[chainId]?.[hash]) {\n        throw Error('Attempted to add existing transaction.');\n      }\n      const txs = transactions[chainId] ?? {};\n      txs[hash] = { hash, approval, summary, from, addedTime: now() };\n      transactions[chainId] = txs;\n    })\n    .addCase(clearAllTransactions, (transactions, { payload: { chainId } }) => {\n      if (!transactions[chainId]) return;\n      transactions[chainId] = {};\n    })\n    .addCase(checkedTransaction, (transactions, { payload: { chainId, hash, blockNumber } }) => {\n      const tx = transactions[chainId]?.[hash];\n      if (!tx) {\n        return;\n      }\n      if (!tx.lastCheckedBlockNumber) {\n        tx.lastCheckedBlockNumber = blockNumber;\n      } else {\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber);\n      }\n    })\n    .addCase(finalizeTransaction, (transactions, { payload: { hash, chainId, receipt } }) => {\n      const tx = transactions[chainId]?.[hash];\n      if (!tx) {\n        return;\n      }\n      tx.receipt = receipt;\n      tx.confirmedTime = now();\n    }),\n);\n","import { createReducer, nanoid } from '@reduxjs/toolkit';\nimport {\n  addPopup,\n  PopupContent,\n  removePopup,\n  toggleWalletModal,\n  toggleSettingsMenu,\n  updateBlockNumber,\n} from './actions';\n\ntype PopupList = Array<{\n  key: string;\n  show: boolean;\n  content: PopupContent;\n  removeAfterMs: number | null;\n}>;\n\nexport interface ApplicationState {\n  blockNumber: { [chainId: number]: number };\n  popupList: PopupList;\n  walletModalOpen: boolean;\n  settingsMenuOpen: boolean;\n}\n\nconst initialState: ApplicationState = {\n  blockNumber: {},\n  popupList: [],\n  walletModalOpen: false,\n  settingsMenuOpen: false,\n};\n\nexport default createReducer(initialState, (builder) =>\n  builder\n    .addCase(updateBlockNumber, (state, action) => {\n      const { chainId, blockNumber } = action.payload;\n      if (typeof state.blockNumber[chainId] !== 'number') {\n        state.blockNumber[chainId] = blockNumber;\n      } else {\n        state.blockNumber[chainId] = Math.max(blockNumber, state.blockNumber[chainId]);\n      }\n    })\n    .addCase(toggleWalletModal, (state) => {\n      state.walletModalOpen = !state.walletModalOpen;\n    })\n    .addCase(toggleSettingsMenu, (state) => {\n      state.settingsMenuOpen = !state.settingsMenuOpen;\n    })\n    .addCase(addPopup, (state, { payload: { content, key, removeAfterMs = 15000 } }) => {\n      state.popupList = (key ? state.popupList.filter((popup) => popup.key !== key) : state.popupList).concat([\n        {\n          key: key || nanoid(),\n          show: true,\n          content,\n          removeAfterMs,\n        },\n      ]);\n    })\n    .addCase(removePopup, (state, { payload: { key } }) => {\n      state.popupList.forEach((p) => {\n        if (p.key === key) {\n          p.show = false;\n        }\n      });\n    }),\n);\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { save, load } from 'redux-localstorage-simple';\nimport transactions from './transactions/reducer';\nimport application from './application/reducer';\n\nconst PERSISTED_KEYS: string[] = ['transactions'];\n\nconst store = configureStore({\n  reducer: {\n    application,\n    transactions,\n  },\n  middleware: [...getDefaultMiddleware({ thunk: false }), save({ states: PERSISTED_KEYS })],\n  preloadedState: load({ states: PERSISTED_KEYS }),\n});\n\nexport default store;\n\nexport type AppState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","export const white = '#FFF';\nexport const black = '#000';\n\nexport const green = {\n  500: '#00D110',\n};\n\nexport const purple = {\n  200: '#bd7cfe',\n  400: '#ab47bc',\n  700: '#7b1fa2',\n};\n\nexport const red = {\n  100: '#C1C1FF',\n  200: '#7575FF',\n  500: '#fff',\n};\n\nexport const grey = {\n  100: '#f5f5f5',\n  200: '#eeeeee',\n  300: '#e0e0e0',\n  400: '#bdbdbd',\n  500: '#9e9e9e',\n  600: '#757575',\n  700: '#616161',\n  800: '#424242',\n  900: '#212121',\n};\n\nexport const bg = '#000000';\n\nexport const teal = {\n  200: '#64ffda',\n};\n","import { black, purple, teal, grey, red, white } from './colors';\n\nconst theme = {\n  borderRadius: 12,\n  color: {\n    black,\n    grey,\n    purple,\n    primary: {\n      light: red[200],\n      main: red[500],\n    },\n    secondary: {\n      main: teal[200],\n    },\n    white,\n    teal,\n  },\n  siteWidth: 1200,\n  spacing: {\n    1: 4,\n    2: 8,\n    3: 16,\n    4: 24,\n    5: 32,\n    6: 48,\n    7: 64,\n  },\n  topBarSize: 72,\n};\n\nexport default theme;\n","//Your theme for the new stuff using material UI has been copied here so it doesn't conflict\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nconst newTheme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    text: {\n      primary: '#0086ff',\n    },\n    background: {\n      default: '#121212',\n      paper: 'rgba(255, 255, 255, 0.9)',\n    },\n    primary: {\n      light: '#757ce8',\n      main: '#0086ff',\n      dark: '#d5d8e5',\n      contrastText: '#000',\n    },\n    secondary: {\n      light: '#ff7961',\n      main: '#f44336',\n      dark: '#ba000d',\n      contrastText: '#000',\n    },\n    action: {\n      disabledBackground: '#CDCDCD',\n      active: '#000',\n      hover: '#000',\n    },\n  },\n  typography: {\n    color: '#d5d8e5',\n    fontFamily: ['\"Poppins\"', 'sans-serif'].join(','),\n  },\n});\n\nexport default newTheme;\n","import { useCallback, useEffect, useState } from 'react';\n\nconst VISIBILITY_STATE_SUPPORTED = 'visibilityState' in document;\n\nfunction isWindowVisible() {\n  return !VISIBILITY_STATE_SUPPORTED || document.visibilityState !== 'hidden';\n}\n\n/**\n * Returns whether the window is currently visible to the user.\n */\nexport default function useIsWindowVisible(): boolean {\n  const [focused, setFocused] = useState<boolean>(isWindowVisible());\n  const listener = useCallback(() => {\n    setFocused(isWindowVisible());\n  }, [setFocused]);\n\n  useEffect(() => {\n    if (!VISIBILITY_STATE_SUPPORTED) return undefined;\n\n    document.addEventListener('visibilitychange', listener);\n    return () => {\n      document.removeEventListener('visibilitychange', listener);\n    };\n  }, [listener]);\n\n  return focused;\n}\n","import { useCallback, useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useWallet } from 'use-wallet';\nimport useDebounce from '../../hooks/useDebounce';\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible';\nimport { updateBlockNumber } from './actions';\nimport { getDefaultProvider } from '../../utils/provider';\n\nexport default function Updater(): null {\n  const { ethereum, chainId } = useWallet();\n\n  const dispatch = useDispatch();\n\n  const windowVisible = useIsWindowVisible();\n\n  const [state, setState] = useState<{\n    chainId: number | undefined;\n    blockNumber: number | null;\n  }>({\n    chainId,\n    blockNumber: null,\n  });\n\n  const blockNumberCallback = useCallback(\n    (blockNumber: number) => {\n      setState((state) => {\n        if (chainId === state.chainId) {\n          if (typeof state.blockNumber !== 'number') return { chainId, blockNumber };\n          return { chainId, blockNumber: Math.max(blockNumber, state.blockNumber) };\n        }\n        return state;\n      });\n    },\n    [chainId, setState],\n  );\n\n  // attach/detach listeners\n  // @ts-ignore\n  useEffect(() => {\n    if (!ethereum || !chainId || !windowVisible) return undefined;\n    setState({ chainId, blockNumber: null });\n\n    const provider = getDefaultProvider();\n    provider\n      .getBlockNumber()\n      .then(blockNumberCallback)\n      .catch((error) => console.error(`Failed to get block number for chainId: ${chainId}`, error));\n\n    provider.on('block', blockNumberCallback);\n    return () => provider.removeListener('block', blockNumberCallback);\n  }, [dispatch, chainId, ethereum, blockNumberCallback, windowVisible]);\n\n  const debouncedState = useDebounce(state, 100);\n\n  useEffect(() => {\n    if (!debouncedState.chainId || !debouncedState.blockNumber || !windowVisible) return;\n    dispatch(\n      updateBlockNumber({\n        chainId: debouncedState.chainId,\n        blockNumber: debouncedState.blockNumber,\n      }),\n    );\n  }, [windowVisible, dispatch, debouncedState.blockNumber, debouncedState.chainId]);\n\n  return null;\n}\n","import { useEffect, useState } from 'react';\n\n// modified from https://usehooks.com/useDebounce/\nexport default function useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n  useEffect(() => {\n    // Update debounced value after delay\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed ...\n    // .. within the delay period. Timeout gets cleared and restarted.\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useWallet } from 'use-wallet';\nimport { useAddPopup, useBlockNumber } from '../application/hooks';\nimport { AppDispatch, AppState } from '../index';\nimport { checkedTransaction, finalizeTransaction } from './actions';\nimport { getDefaultProvider } from '../../utils/provider';\n\nexport function shouldCheck(\n  lastBlockNumber: number,\n  tx: { addedTime: number; receipt?: {}; lastCheckedBlockNumber?: number },\n): boolean {\n  if (tx.receipt) return false;\n  if (!tx.lastCheckedBlockNumber) return true;\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber;\n  if (blocksSinceCheck < 1) return false;\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60;\n  if (minutesPending > 60) {\n    // every 10 blocks if pending for longer than an hour\n    return blocksSinceCheck > 9;\n  } else if (minutesPending > 5) {\n    // every 3 blocks if pending more than 5 minutes\n    return blocksSinceCheck > 2;\n  } else {\n    // otherwise every block\n    return true;\n  }\n}\n\nexport default function Updater(): null {\n  const { chainId, ethereum } = useWallet();\n\n  const lastBlockNumber = useBlockNumber();\n\n  const dispatch = useDispatch<AppDispatch>();\n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions);\n\n  const transactions = chainId ? state[chainId] ?? {} : {};\n\n  // show popup on confirm\n  const addPopup = useAddPopup();\n\n  useEffect(() => {\n    if (!chainId || !ethereum || !lastBlockNumber) {\n      return;\n    }\n\n    const provider = getDefaultProvider();\n    Object.keys(transactions)\n      .filter((hash) => shouldCheck(lastBlockNumber, transactions[hash]))\n      .forEach((hash) => {\n        provider\n          .getTransactionReceipt(hash)\n          .then((receipt) => {\n            if (receipt) {\n              dispatch(\n                finalizeTransaction({\n                  chainId,\n                  hash,\n                  receipt: {\n                    blockHash: receipt.blockHash,\n                    blockNumber: receipt.blockNumber,\n                    contractAddress: receipt.contractAddress,\n                    from: receipt.from,\n                    status: receipt.status,\n                    to: receipt.to,\n                    transactionHash: receipt.transactionHash,\n                    transactionIndex: receipt.transactionIndex,\n                  },\n                }),\n              );\n\n              addPopup(\n                {\n                  txn: {\n                    hash,\n                    success: receipt.status === 1,\n                    summary: transactions[hash]?.summary,\n                  },\n                },\n                hash,\n              );\n            } else {\n              dispatch(checkedTransaction({ chainId, hash, blockNumber: lastBlockNumber }));\n            }\n          })\n          .catch((error) => {\n            console.error(`failed to check transaction hash: ${hash}`, error);\n          });\n      });\n  }, [chainId, ethereum, transactions, lastBlockNumber, dispatch, addPopup]);\n\n  return null;\n}\n","import React from 'react';\nimport ApplicationUpdater from './application/updater';\nimport TransactionUpdater from './transactions/updater';\n\nconst Updaters = () => (\n  <>\n    <ApplicationUpdater />\n    <TransactionUpdater />\n  </>\n);\n\nexport default Updaters;\n","import Loader from './Loader';\n\nexport default Loader;\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nconst Loader = () => {\n  return (\n    <div\n      style={{\n        position: 'absolute',\n        left: '50%',\n        top: '50%',\n        transform: 'translate(-50%, -50%)',\n      }}\n    >\n      <Typography>Loading</Typography>\n    </div>\n  );\n};\n\nexport default Loader;\n","import React, { useContext } from 'react';\nimport { AlertCircle, CheckCircle } from 'react-feather';\nimport styled, { ThemeContext } from 'styled-components';\nimport { useWallet } from 'use-wallet';\nimport config from '../../config';\n\nconst RowNoFlex = styled.div`\n  flex-wrap: nowrap;\n`;\n\nexport default function TransactionPopup({\n  hash,\n  success,\n  summary,\n}: {\n  hash: string;\n  success?: boolean;\n  summary?: string;\n}) {\n  const { chainId } = useWallet();\n  const theme = useContext(ThemeContext);\n\n  return (\n    <RowNoFlex>\n      <div style={{ paddingRight: 16 }}>\n        {success ? <CheckCircle color={theme.color.teal[200]} size={24} /> : <AlertCircle color=\"#FF6871\" size={24} />}\n      </div>\n      <div>\n        <StyledPopupDesc>{summary ?? 'Hash: ' + hash.slice(0, 8) + '...' + hash.slice(58, 65)}</StyledPopupDesc>\n        {chainId && (\n          <StyledLink target=\"_blank\" href={`${config.ftmscanUrl}/tx/${hash}`}>\n            View on Ftmscan\n          </StyledLink>\n        )}\n      </div>\n    </RowNoFlex>\n  );\n}\n\nconst StyledPopupDesc = styled.span`\n  font-weight: 500;\n  color: ${(props) => props.theme.color.grey[300]};\n`;\n\nconst StyledLink = styled.a`\n  color: ${(props) => props.theme.color.grey[500]};\n`;\n","import React, { useCallback } from 'react';\nimport { AlertCircle } from 'react-feather';\nimport styled from 'styled-components';\n\nconst RowNoFlex = styled.div`\n  flex-wrap: nowrap;\n`;\n\nexport default function ErrorPopup({ message, stack }: { message: string; stack: string }) {\n  const copyErrorDetails = useCallback(async () => {\n    await navigator.clipboard.writeText(`${message}\\n${stack}`);\n  }, [message, stack]);\n\n  return (\n    <RowNoFlex>\n      <div style={{ paddingRight: 16 }}>\n        <AlertCircle color=\"#FF6871\" size={24} />\n      </div>\n      <div>\n        <StyledPopupDesc>{message}</StyledPopupDesc>\n        <StyledLink onClick={copyErrorDetails} href=\"#\">\n          Copy error details\n        </StyledLink>\n      </div>\n    </RowNoFlex>\n  );\n}\n\nconst StyledPopupDesc = styled.span`\n  font-weight: 500;\n  color: ${(props) => props.theme.color.grey[300]};\n`;\n\nconst StyledLink = styled.a`\n  color: ${(props) => props.theme.color.grey[500]};\n`;\n","import React, { useCallback, useContext, useEffect } from 'react';\nimport { X } from 'react-feather';\nimport { useSpring } from 'react-spring/web';\nimport styled, { ThemeContext } from 'styled-components';\nimport { animated } from 'react-spring';\nimport { PopupContent } from '../../state/application/actions';\nimport { useRemovePopup } from '../../state/application/hooks';\nimport TransactionPopup from './TransactionPopup';\nimport ErrorPopup from './ErrorPopup';\n\nexport const StyledClose = styled(X)`\n  position: absolute;\n  right: 10px;\n  top: 10px;\n\n  :hover {\n    cursor: pointer;\n  }\n`;\nexport const Popup = styled.div`\n  display: inline-block;\n  width: 100%;\n  padding: 1em;\n  background-color: ${({ theme }) => theme.color.grey[700]};\n  position: relative;\n  border-radius: 10px;\n  padding: 20px;\n  padding-right: 35px;\n  overflow: hidden;\n\n  @media (max-width: 768px) {\n    min-width: 290px;\n  }\n`;\nconst Fader = styled.div`\n  position: absolute;\n  bottom: 0px;\n  left: 0px;\n  width: 100%;\n  height: 2px;\n  background-color: ${({ theme }) => theme.color.grey[400]};\n`;\n\nconst AnimatedFader = animated(Fader);\n\nexport default function PopupItem({\n  removeAfterMs,\n  content,\n  popKey,\n}: {\n  removeAfterMs: number | null;\n  content: PopupContent;\n  popKey: string;\n}) {\n  const removePopup = useRemovePopup();\n  const removeThisPopup = useCallback(() => removePopup(popKey), [popKey, removePopup]);\n  useEffect(() => {\n    if (removeAfterMs === null) return undefined;\n\n    const timeout = setTimeout(() => {\n      removeThisPopup();\n    }, removeAfterMs);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [removeAfterMs, removeThisPopup]);\n\n  const theme = useContext(ThemeContext);\n\n  let popupContent;\n  if ('txn' in content) {\n    const {\n      txn: { hash, success, summary },\n    } = content;\n    popupContent = <TransactionPopup hash={hash} success={success} summary={summary} />;\n  }\n  if ('error' in content) {\n    const {\n      error: { message, stack },\n    } = content;\n    popupContent = <ErrorPopup message={message} stack={stack} />;\n  }\n\n  const faderStyle = useSpring({\n    from: { width: '100%' },\n    to: { width: '0%' },\n    config: { duration: removeAfterMs ?? undefined },\n  });\n\n  return (\n    <Popup>\n      <StyledClose color={theme.text2} onClick={removeThisPopup} />\n      {popupContent}\n      {removeAfterMs !== null ? <AnimatedFader style={faderStyle} /> : null}\n    </Popup>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useActivePopups } from '../../state/application/hooks';\nimport PopupItem from './PopupItem';\n\nconst MobilePopupWrapper = styled.div<{ height: string | number }>`\n  position: relative;\n  max-width: 100%;\n  height: ${({ height }) => height};\n  margin: ${({ height }) => (height ? '0 auto;' : 0)};\n  margin-bottom: ${({ height }) => (height ? '20px' : 0)}};\n\n  display: none;\n  @media (max-width: 768px) {\n    display: block;\n  };\n`;\n\nconst MobilePopupInner = styled.div`\n  height: 99%;\n  overflow-x: auto;\n  overflow-y: hidden;\n  display: flex;\n  flex-direction: row;\n  -webkit-overflow-scrolling: touch;\n  ::-webkit-scrollbar {\n    display: none;\n  }\n`;\n\nconst FixedPopupColumn = styled.div`\n  position: fixed;\n  top: 64px;\n  margin-right: 24px;\n  right: 3rem;\n  max-width: 355px !important;\n  width: 100%;\n  z-index: 2;\n\n  @media (max-width: 768px) {\n    display: none;\n  } ;\n`;\n\nexport default function Popups() {\n  // get all popups\n  const activePopups = useActivePopups();\n\n  return (\n    <>\n      <FixedPopupColumn>\n        {activePopups.map((item) => (\n          <PopupItem key={item.key} content={item.content} popKey={item.key} removeAfterMs={item.removeAfterMs} />\n        ))}\n      </FixedPopupColumn>\n      <MobilePopupWrapper height={activePopups?.length > 0 ? 'fit-content' : 0}>\n        <MobilePopupInner>\n          {activePopups // reverse so new items up front\n            .slice(0)\n            .reverse()\n            .map((item) => (\n              <PopupItem key={item.key} content={item.content} popKey={item.key} removeAfterMs={item.removeAfterMs} />\n            ))}\n        </MobilePopupInner>\n      </MobilePopupWrapper>\n    </>\n  );\n}\n","import React, { Suspense, lazy } from 'react';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { ThemeProvider as TP } from '@material-ui/core/styles';\nimport { ThemeProvider as TP1 } from 'styled-components';\nimport { UseWalletProvider } from 'use-wallet';\nimport usePromptNetwork from './hooks/useNetworkPrompt';\nimport BanksProvider from './contexts/Banks';\nimport TombFinanceProvider from './contexts/TombFinanceProvider';\nimport ModalsProvider from './contexts/Modals';\nimport store from './state';\nimport theme from './theme';\nimport newTheme from './newTheme';\nimport config from './config';\nimport Updaters from './state/Updaters';\nimport Loader from './components/Loader';\nimport Popups from './components/Popups';\nimport Regulations from './views/Regulations/Regulations';\nimport { RefreshContextProvider } from './contexts/RefreshContext';\n\nconst Home = lazy(() => import('./views/Home'));\nconst Staking = lazy(() => import('./views/Staking'));\nconst Boardroom = lazy(() => import('./views/Boardroom'));\nconst Bonds = lazy(() => import('./views/Bonds'));\nconst SBS = lazy(() => import('./views/Sbs'));\nconst Liquidity = lazy(() => import('./views/Liquidity'));\n\nconst NoMatch = () => (\n  <h3 style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)' }}>\n    URL Not Found. <a href=\"/\">Go back home.</a>\n  </h3>\n);\n\nconst App: React.FC = () => {\n  // Clear localStorage for mobile users\n  if (typeof localStorage.version_app === 'undefined' || localStorage.version_app !== '1.1') {\n    localStorage.clear();\n    localStorage.setItem('connectorId', '');\n    localStorage.setItem('version_app', '1.1');\n  }\n\n  usePromptNetwork();\n\n  return (\n    <Providers>\n      <Router>\n        <Suspense fallback={<Loader />}>\n          <Switch>\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route path=\"/farm\">\n              <Staking />\n            </Route>\n            <Route path=\"/boardroom\">\n              <Boardroom />\n            </Route>\n            <Route path=\"/bonds\">\n              <Bonds />\n            </Route>\n            {/* <Route path=\"/sbs\">\n              <SBS />\n            </Route>\n            <Route path=\"/regulations\">\n              <Regulations />\n            </Route>\n            <Route path=\"/liquidity\">\n              <Liquidity />\n            </Route> */}\n            <Route path=\"*\">\n              <NoMatch />\n            </Route>\n          </Switch>\n        </Suspense>\n      </Router>\n    </Providers>\n  );\n};\n\nconst Providers: React.FC = ({ children }) => {\n  return (\n    <TP1 theme={theme}>\n      <TP theme={newTheme}>\n        <UseWalletProvider\n          chainId={config.chainId}\n          connectors={{\n            walletconnect: { rpcUrl: config.defaultProvider },\n            walletlink: {\n              url: config.defaultProvider,\n              appName: 'STONE Finance',\n              appLogoUrl: 'https://github.com/tombfinance/tombfinance-assets/blob/master/logo_tomb_NoBG.png',\n            },\n          }}\n        >\n          <Provider store={store}>\n            <Updaters />\n            <RefreshContextProvider>\n              <TombFinanceProvider>\n                <ModalsProvider>\n                  <BanksProvider>\n                    <>\n                      <Popups />\n                      {children}\n                    </>\n                  </BanksProvider>\n                </ModalsProvider>\n              </TombFinanceProvider>\n            </RefreshContextProvider>\n          </Provider>\n        </UseWalletProvider>\n      </TP>\n    </TP1>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const TOMB_TICKER = 'STONE';\nexport const TSHARE_TICKER = 'SSHARE';\nexport const TBOND_TICKER = 'SBOND';\nexport const FTM_TICKER = 'FTM';\nexport const WFTM_TICKER = 'WFTM';\nexport const SPOOKY_ROUTER_ADDR = '0xF491e7B69E4244ad4002BC14e878a34207E38c29';\nexport const ZAPPER_ROUTER_ADDR = '0x8bb1fe7a50082623b372d857b4d07911c786a3e9';\nexport const TAX_OFFICE_ADDR = '0x2d24cae5ce7fe5ae16d5fdc022c5f67006acf5fb';\n","import { createAction } from '@reduxjs/toolkit';\n// import { ChainId } from '@uniswap/sdk';\nimport { ChainId } from '@spookyswap/sdk';\n\nexport interface SerializableTransactionReceipt {\n  to: string;\n  from: string;\n  contractAddress: string;\n  transactionIndex: number;\n  blockHash: string;\n  transactionHash: string;\n  blockNumber: number;\n  status?: number;\n}\n\nexport const addTransaction = createAction<{\n  chainId: ChainId;\n  hash: string;\n  from: string;\n  approval?: { tokenAddress: string; spender: string };\n  summary?: string;\n}>('transactions/addTransaction');\n\nexport const clearAllTransactions = createAction<{ chainId: ChainId }>('transactions/clearAllTransactions');\n\nexport const finalizeTransaction = createAction<{\n  chainId: ChainId;\n  hash: string;\n  receipt: SerializableTransactionReceipt;\n}>('transactions/finalizeTransaction');\n\nexport const checkedTransaction = createAction<{\n  chainId: ChainId;\n  hash: string;\n  blockNumber: number;\n}>('transactions/checkedTransaction');\n","import { useCallback, useMemo } from 'react';\nimport { addPopup, PopupContent, removePopup, toggleWalletModal, toggleSettingsMenu } from './actions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { AppState } from '../index';\nimport { useWallet } from 'use-wallet';\n\nexport function useBlockNumber(): number | undefined {\n  const { chainId } = useWallet();\n  return useSelector((state: AppState) => state.application.blockNumber[chainId ?? -1]);\n}\n\nexport function useWalletModalOpen(): boolean {\n  return useSelector((state: AppState) => state.application.walletModalOpen);\n}\n\nexport function useWalletModalToggle(): () => void {\n  const dispatch = useDispatch();\n  return useCallback(() => dispatch(toggleWalletModal()), [dispatch]);\n}\n\nexport function useSettingsMenuOpen(): boolean {\n  return useSelector((state: AppState) => state.application.settingsMenuOpen);\n}\n\nexport function useToggleSettingsMenu(): () => void {\n  const dispatch = useDispatch();\n  return useCallback(() => dispatch(toggleSettingsMenu()), [dispatch]);\n}\n\n// returns a function that allows adding a popup\nexport function useAddPopup(): (content: PopupContent, key?: string) => void {\n  const dispatch = useDispatch();\n\n  return useCallback(\n    (content: PopupContent, key?: string) => {\n      dispatch(addPopup({ content, key }));\n    },\n    [dispatch],\n  );\n}\n\n// returns a function that allows removing a popup via its key\nexport function useRemovePopup(): (key: string) => void {\n  const dispatch = useDispatch();\n  return useCallback(\n    (key: string) => {\n      dispatch(removePopup({ key }));\n    },\n    [dispatch],\n  );\n}\n\n// get the list of active popups\nexport function useActivePopups(): AppState['application']['popupList'] {\n  const list = useSelector((state: AppState) => state.application.popupList);\n  return useMemo(() => list.filter((item) => item.show), [list]);\n}\n"],"sourceRoot":""}