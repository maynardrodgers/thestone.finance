{"version":3,"sources":["assets/img/pit.png","hooks/TShareSwapper/useSwapTBondToTShare.ts","hooks/TShareSwapper/useTShareSwapperStats.ts","views/Sbs/Sbs.tsx","hooks/useHandleTransactionReceipt.ts","hooks/useApprove.ts","components/UnlockWallet/UnlockWallet.tsx","components/Spacer/Spacer.tsx","components/PageHeader/PageHeader.tsx"],"names":["module","exports","useSwapTBondToTShare","tombFinance","useTombFinance","handleTransactionReceipt","useHandleTransactionReceipt","onSwapTShare","useCallback","tbondAmount","tbondAmountBn","parseUnits","swapTBondToTShare","useTShareSwapperStats","account","useState","stat","setStat","fastRefresh","useRefresh","useEffect","a","myAccount","getTShareSwapperStat","console","error","fetchTShareSwapperStat","BackgroundImage","createGlobalStyle","PitImage","isNumeric","n","isNaN","parseFloat","isFinite","StyledBoardroom","styled","div","StyledCardsWrapper","StyledCardWrapper","StyledApproveWrapper","StyledCardTitle","props","theme","spacing","StyledCardIcon","color","grey","StyledExchanger","StyledToken","StyledCardContentInner","StyledDesc","span","Sbs","path","useRouteMatch","useWallet","setTbondAmount","tshareAmount","setTshareAmount","useApprove","SBOND","contracts","TShareSwapper","address","approveStatus","approve","tshareSwapperStat","tshareBalance","useMemo","Number","bondBalance","tbondBalance","handleTBondChange","e","currentTarget","value","estimateAmountOfTShare","updateTShareAmount","handleTBondSelectMax","String","handleTShareSelectMax","rateTSharePerTomb","updateTBondAmount","BigNumber","from","pow","mul","getDisplayBalance","handleTShareChange","inputData","Page","exact","PageHeader","icon","title","subtitle","Box","mt","Grid","container","justify","Card","CardContent","TokenSymbol","symbol","size","item","xs","TokenInput","onSelectMax","onChange","max","Spacer","SSHARE","ApprovalState","APPROVED","Button","disabled","NOT_APPROVED","variant","onClick","toString","UnlockWallet","addTransaction","useTransactionAdder","addPopup","useAddPopup","promise","summary","then","tx","catch","err","message","includes","toLowerCase","slice","stack","APPROVE_AMOUNT","ethers","constants","MaxUint256","APPROVE_BASE_AMOUNT","token","spender","pendingApproval","useHasPendingApproval","currentAllowance","useAllowance","approvalState","lt","PENDING","UNKNOWN","response","approval","tokenAddress","style","position","top","left","transform","AccountButton","StyledSpacer","s","useContext","ThemeContext","StyledPageHeader","StyledTitle","h1","StyledSubtitle","h3"],"mappings":"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","file":"static/js/17.63f4281a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pit.268bf984.png\";","import { useCallback } from 'react';\nimport useTombFinance from '../useTombFinance';\nimport useHandleTransactionReceipt from '../useHandleTransactionReceipt';\n// import { BigNumber } from \"ethers\";\nimport { parseUnits } from 'ethers/lib/utils';\n\n\nconst useSwapTBondToTShare = () => {\n  const tombFinance = useTombFinance();\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n\n  const handleSwapTShare = useCallback(\n  \t(tbondAmount: string) => {\n\t  \tconst tbondAmountBn = parseUnits(tbondAmount, 18);\n\t  \thandleTransactionReceipt(\n\t  \t\ttombFinance.swapTBondToTShare(tbondAmountBn),\n\t  \t\t`Swap ${tbondAmount} TBond to TShare`\n\t  \t);\n  \t},\n  \t[tombFinance, handleTransactionReceipt]\n  );\n  return { onSwapTShare: handleSwapTShare };\n};\n\nexport default useSwapTBondToTShare;","import { useEffect, useState } from 'react';\nimport useTombFinance from '../useTombFinance';\nimport { TShareSwapperStat } from '../../tomb-finance/types';\nimport useRefresh from '../useRefresh';\n\nconst useTShareSwapperStats = (account: string) => {\n  const [stat, setStat] = useState<TShareSwapperStat>();\n  const { fastRefresh/*, slowRefresh*/ } = useRefresh();\n  const tombFinance = useTombFinance();\n\n  useEffect(() => {\n    async function fetchTShareSwapperStat() {\n      try{\n        if(tombFinance.myAccount) {\n          setStat(await tombFinance.getTShareSwapperStat(account));\n        }\n      }\n      catch(err){\n        console.error(err);\n      }\n    }\n    fetchTShareSwapperStat();\n  }, [setStat, tombFinance, fastRefresh, account]);\n\n  return stat;\n};\n\nexport default useTShareSwapperStats;","import React, { /*useCallback, useEffect, */useMemo, useState } from 'react';\nimport Page from '../../components/Page';\nimport PitImage from '../../assets/img/pit.png';\nimport { createGlobalStyle } from 'styled-components';\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\nimport { useWallet } from 'use-wallet';\nimport UnlockWallet from '../../components/UnlockWallet';\nimport PageHeader from '../../components/PageHeader';\nimport { Box,/* Paper, Typography,*/ Button, Grid } from '@material-ui/core';\nimport styled from 'styled-components';\nimport Spacer from '../../components/Spacer';\nimport useTombFinance from '../../hooks/useTombFinance';\nimport { getDisplayBalance/*, getBalance*/ } from '../../utils/formatBalance';\nimport { BigNumber/*, ethers*/ } from 'ethers';\nimport useSwapTBondToTShare from '../../hooks/TShareSwapper/useSwapTBondToTShare';\nimport useApprove, { ApprovalState } from '../../hooks/useApprove';\nimport useTShareSwapperStats from '../../hooks/TShareSwapper/useTShareSwapperStats';\nimport TokenInput from '../../components/TokenInput';\nimport Card from '../../components/Card';\nimport CardContent from '../../components/CardContent';\nimport TokenSymbol from '../../components/TokenSymbol';\n\nconst BackgroundImage = createGlobalStyle`\n  body {\n    // background: url(${PitImage}) no-repeat !important;\n    // background-size: cover !important;\n    background-color: #ddd;\n  }\n`;\n\nfunction isNumeric(n: any) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}\n\nconst Sbs: React.FC = () => {\n  const { path } = useRouteMatch();\n  const { account } = useWallet();\n  const tombFinance = useTombFinance();\n  const [tbondAmount, setTbondAmount] = useState('');\n  const [tshareAmount, setTshareAmount] = useState('');\n\n  const [approveStatus, approve] = useApprove(tombFinance.SBOND, tombFinance.contracts.TShareSwapper.address);\n  const { onSwapTShare } = useSwapTBondToTShare();\n  const tshareSwapperStat = useTShareSwapperStats(account);\n\n  const tshareBalance = useMemo(() => (tshareSwapperStat ? Number(tshareSwapperStat.tshareBalance) : 0), [tshareSwapperStat]);\n  const bondBalance = useMemo(() => (tshareSwapperStat ? Number(tshareSwapperStat.tbondBalance) : 0), [tshareSwapperStat]);\n\n  const handleTBondChange = async (e: any) => {\n    if (e.currentTarget.value === '') {\n      setTbondAmount('');\n      setTshareAmount('');\n      return\n    }\n    if (!isNumeric(e.currentTarget.value)) return;\n    setTbondAmount(e.currentTarget.value);\n    const updateTShareAmount = await tombFinance.estimateAmountOfTShare(e.currentTarget.value);\n    setTshareAmount(updateTShareAmount);  \n  };\n\n  const handleTBondSelectMax = async () => {\n    setTbondAmount(String(bondBalance));\n    const updateTShareAmount = await tombFinance.estimateAmountOfTShare(String(bondBalance));\n    setTshareAmount(updateTShareAmount); \n  };\n\n  const handleTShareSelectMax = async () => {\n    setTshareAmount(String(tshareBalance));\n    const rateTSharePerTomb = (await tombFinance.getTShareSwapperStat(account)).rateTSharePerTomb;\n    const updateTBondAmount = ((BigNumber.from(10).pow(30)).div(BigNumber.from(rateTSharePerTomb))).mul(Number(tshareBalance) * 1e6);\n    setTbondAmount(getDisplayBalance(updateTBondAmount, 18, 6));\n  };\n\n  const handleTShareChange = async (e: any) => {\n    const inputData = e.currentTarget.value;\n    if (inputData === '') {\n      setTshareAmount('');\n      setTbondAmount('');\n      return\n    }\n    if (!isNumeric(inputData)) return;\n    setTshareAmount(inputData);\n    const rateTSharePerTomb = (await tombFinance.getTShareSwapperStat(account)).rateTSharePerTomb;\n    const updateTBondAmount = ((BigNumber.from(10).pow(30)).div(BigNumber.from(rateTSharePerTomb))).mul(Number(inputData) * 1e6);\n    setTbondAmount(getDisplayBalance(updateTBondAmount, 18, 6));\n  }\n\n  return (\n    <Switch>\n      <Page>\n        <BackgroundImage />\n        {!!account ? (\n          <>\n            <Route exact path={path}>\n              <PageHeader icon={'🏦'} title=\"TBond -> TShare Swap\" subtitle=\"Swap TBond to TShare\" />\n            </Route>\n            <Box mt={5}>\n              <Grid container justify=\"center\" spacing={6}>\n                <StyledBoardroom>\n                  <StyledCardsWrapper>\n                    <StyledCardWrapper>\n                      <Card>\n                        <CardContent>\n                          <StyledCardContentInner>\n                            <StyledCardTitle>TBonds</StyledCardTitle>\n                            <StyledExchanger>\n                              <StyledToken>\n                                <StyledCardIcon>\n                                  <TokenSymbol symbol={tombFinance.SBOND.symbol} size={54} />\n                                </StyledCardIcon>\n                              </StyledToken>\n                            </StyledExchanger>\n                            <Grid item xs={12}>\n                              <TokenInput\n                                onSelectMax={handleTBondSelectMax}\n                                onChange={handleTBondChange}\n                                value={tbondAmount}\n                                max={bondBalance}\n                                symbol=\"TBond\"\n                              ></TokenInput>\n                            </Grid>\n                            <StyledDesc>{`${bondBalance} SBOND Available in Wallet`}</StyledDesc>\n                          </StyledCardContentInner>\n                        </CardContent>\n                      </Card>\n                    </StyledCardWrapper>\n                    <Spacer size=\"lg\"/>\n                    <StyledCardWrapper>\n                      <Card>\n                        <CardContent>\n                          <StyledCardContentInner>\n                            <StyledCardTitle>TShare</StyledCardTitle>\n                            <StyledExchanger>\n                              <StyledToken>\n                                <StyledCardIcon>\n                                  <TokenSymbol symbol={tombFinance.SSHARE.symbol} size={54} />\n                                </StyledCardIcon>\n                              </StyledToken>\n                            </StyledExchanger>\n                            <Grid item xs={12}>\n                              <TokenInput\n                                onSelectMax={handleTShareSelectMax}\n                                onChange={handleTShareChange}\n                                value={tshareAmount}\n                                max={tshareBalance}\n                                symbol=\"TShare\"\n                              ></TokenInput>\n                            </Grid>\n                            <StyledDesc>{`${tshareBalance} SSHARE Available in Swapper`}</StyledDesc>\n                          </StyledCardContentInner>\n                        </CardContent>\n                      </Card>\n              \n                    </StyledCardWrapper>\n                  </StyledCardsWrapper>\n                </StyledBoardroom>\n              </Grid>\n            </Box>\n\n            <Box mt={5}>\n              <Grid container justify=\"center\">\n                <Grid item xs={8}>\n                  <Card>\n                    <CardContent>\n                      <StyledApproveWrapper>\n                      {approveStatus !== ApprovalState.APPROVED ? (\n                        <Button\n                          disabled={approveStatus !== ApprovalState.NOT_APPROVED}\n                          color=\"primary\"\n                          variant=\"contained\"\n                          onClick={approve}\n                          size=\"medium\"\n                        >\n                          Approve SBOND\n                        </Button>\n                      ) : (\n                        <Button\n                          color=\"primary\"\n                          variant=\"contained\"\n                          onClick={() => onSwapTShare(tbondAmount.toString())}\n                          size=\"medium\"\n                        >\n                          Swap\n                        </Button>\n                      )}\n                      </StyledApproveWrapper>\n                    </CardContent>\n                  </Card>\n                </Grid>\n              </Grid>\n            </Box>\n          </>\n        ) : (\n          <UnlockWallet />\n        )}\n      </Page>\n    </Switch>\n  );\n};\n\nconst StyledBoardroom = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`;\n\nconst StyledCardsWrapper = styled.div`\n  display: flex;\n  @media (max-width: 768px) {\n    width: 100%;\n    flex-flow: column nowrap;\n    align-items: center;\n  }\n`;\n\nconst StyledCardWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`;\n\nconst StyledApproveWrapper = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n`;\nconst StyledCardTitle = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 20px;\n  font-weight: 700;\n  height: 64px;\n  justify-content: center;\n  margin-top: ${(props) => -props.theme.spacing[3]}px;\n`;\n\nconst StyledCardIcon = styled.div`\n  background-color: ${(props) => props.theme.color.grey[900]};\n  width: 72px;\n  height: 72px;\n  border-radius: 36px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: ${(props) => props.theme.spacing[2]}px;\n`;\n\nconst StyledExchanger = styled.div`\n  align-items: center;\n  display: flex;\n  margin-bottom: ${(props) => props.theme.spacing[5]}px;\n`;\n\nconst StyledToken = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  font-weight: 600;\n`;\n\nconst StyledCardContentInner = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\nconst StyledDesc = styled.span``;\n\nexport default Sbs;\n","import { useCallback } from 'react';\nimport { TransactionResponse } from '@ethersproject/providers';\nimport { useTransactionAdder } from '../state/transactions/hooks';\nimport { useAddPopup } from '../state/application/hooks';\n\nfunction useHandleTransactionReceipt(): (promise: Promise<TransactionResponse>, summary: string) => void {\n  const addTransaction = useTransactionAdder();\n  const addPopup = useAddPopup();\n\n  return useCallback(\n    (promise: Promise<TransactionResponse>, summary: string) => {\n      promise\n        .then((tx) => addTransaction(tx, { summary }))\n        .catch((err) => {\n          if (err.message.includes('User denied')) {\n            // User denied transaction signature on MetaMask.\n            return;\n          }\n          const message = `Unable to ${summary[0].toLowerCase()}${summary.slice(1)}`;\n          console.error(`${message}: ${err.message || err.stack}`);\n          addPopup({ error: { message, stack: err.message || err.stack } });\n        });\n    },\n    [addPopup, addTransaction],\n  );\n}\n\nexport default useHandleTransactionReceipt;\n","import { BigNumber, ethers } from 'ethers';\nimport { useCallback, useMemo } from 'react';\nimport { useHasPendingApproval, useTransactionAdder } from '../state/transactions/hooks';\nimport useAllowance from './useAllowance';\nimport ERC20 from '../tomb-finance/ERC20';\n\nconst APPROVE_AMOUNT = ethers.constants.MaxUint256;\nconst APPROVE_BASE_AMOUNT = BigNumber.from('1000000000000000000000000');\n\nexport enum ApprovalState {\n  UNKNOWN,\n  NOT_APPROVED,\n  PENDING,\n  APPROVED,\n}\n\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\nfunction useApprove(token: ERC20, spender: string): [ApprovalState, () => Promise<void>] {\n  const pendingApproval = useHasPendingApproval(token.address, spender);\n  const currentAllowance = useAllowance(token, spender, pendingApproval);\n\n  // check the current approval status\n  const approvalState: ApprovalState = useMemo(() => {\n    // we might not have enough data to know whether or not we need to approve\n    if (!currentAllowance) return ApprovalState.UNKNOWN;\n\n    // amountToApprove will be defined if currentAllowance is\n    return currentAllowance.lt(APPROVE_BASE_AMOUNT)\n      ? pendingApproval\n        ? ApprovalState.PENDING\n        : ApprovalState.NOT_APPROVED\n      : ApprovalState.APPROVED;\n  }, [currentAllowance, pendingApproval]);\n\n  const addTransaction = useTransactionAdder();\n\n  const approve = useCallback(async (): Promise<void> => {\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\n      console.error('approve was called unnecessarily');\n      return;\n    }\n\n    const response = await token.approve(spender, APPROVE_AMOUNT);\n    addTransaction(response, {\n      summary: `Approve ${token.symbol}`,\n      approval: {\n        tokenAddress: token.address,\n        spender: spender,\n      },\n    });\n  }, [approvalState, token, spender, addTransaction]);\n\n  return [approvalState, approve];\n}\n\nexport default useApprove;\n","import React from 'react';\nimport { Box } from '@material-ui/core';\nimport AccountButton from '../Nav/AccountButton';\n\nconst UnlockWallet = () => {\n  return (\n    <Box style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)' }}>\n      <AccountButton />\n      {/* <Button color=\"primary\" variant=\"contained\" onClick={() => connect('injected')}>Unlock Wallet</Button> */}\n    </Box>\n  );\n};\n\nexport default UnlockWallet;\n","import React, { useContext } from 'react';\nimport styled, { ThemeContext } from 'styled-components';\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg';\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext);\n\n  let s: number;\n  switch (size) {\n    case 'lg':\n      s = spacing[6];\n      break;\n    case 'sm':\n      s = spacing[2];\n      break;\n    case 'md':\n    default:\n      s = spacing[4];\n  }\n\n  return <StyledSpacer size={s} />;\n};\n\ninterface StyledSpacerProps {\n  size: number;\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`;\n\nexport default Spacer;\n","import React from 'react';\nimport styled from 'styled-components';\n\ninterface PageHeaderProps {\n  icon: React.ReactNode;\n  subtitle?: string;\n  title?: string;\n}\n\nconst PageHeader: React.FC<PageHeaderProps> = ({ icon, subtitle, title }) => {\n  return (\n    <StyledPageHeader>\n      {/* <StyledIcon>{icon}</StyledIcon> */}\n      <StyledTitle>{title}</StyledTitle>\n      <StyledSubtitle>{subtitle}</StyledSubtitle>\n    </StyledPageHeader>\n  );\n};\n\nconst StyledPageHeader = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  padding-bottom: ${(props) => props.theme.spacing[6]}px;\n  padding-top: ${(props) => props.theme.spacing[6]}px;\n  max-width: 512px;\n  width: 100%;\n  margin: 0 auto;\n`;\n\nconst StyledTitle = styled.h1`\n  color: ${(props) => props.theme.color.grey[200]};\n  font-size: 36px;\n  font-weight: 700;\n  margin: 0;\n  padding: 0;\n`;\n\nconst StyledSubtitle = styled.h3`\n  color: ${(props) => props.theme.color.grey[700]};\n  font-size: 18px;\n  font-weight: 400;\n  margin: 0;\n  padding: 0;\n  text-align: center;\n`;\n\nexport default PageHeader;\n"],"sourceRoot":""}